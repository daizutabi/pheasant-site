{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1 Pheasant Documentation 1.1 Overview Welcome to Pheasant. Pheasant is a Markdown converter which is designed to work with MkDocs as a plugin. Highlights include: Auto generation of outputs for a fenced code block or inline code in Markdown source using Jupyter client . The code language is not restricted to Python. Auto numbering of headers, figures, tables, and etc. Numbered objects can be linked from other Markdown sources. 1.2 Installation You can install Pheasant from PyPI. $ pip install pheasant If you use Pheasant as a plugin of MkDocs, you also need to install it (version 1.1.1 or later is required). $ pip install mkdocs In your mkdocs.yml , add lines below to register Pheasant as a MkDocs plugin. plugins: - pheasant 1.3 Getting Started 1.3.1 Auto generation of the executed outputs with Jupyter client In a markdown fenced code below, ```python print(1) ``` a print function is executed via Jupyter client and converted into HTML: <div class=\"input\"><pre><code class=\"python\">print(1)</code></pre></div> <div class=\"stdout\"><pre><code class=\"nohighlight\">1</code></pre></div> Then, finally rendered as: print(1) [1] 2020-05-19 14:00:45 ( 4.00ms ) python3 ( 7.00ms ) 1 Other language code can be executed if a kernel for the language has been installed. For example, ```julia println(\"Hello, IJulia!\") ``` println(\"Hello, IJulia!\") [2] ( ) ( ) You can check the kernel name and its total execution time during the conversion process at the right side of an input cell. Like Jupyter Notebook , the last object in a code cell is displayed as the output of the cell. ```python greeting = 'Hello, Python' greeting ``` greeting = 'Hello, Python' greeting [3] 2020-05-19 14:00:45 ( 5.00ms ) python3 ( 12.0ms ) 'Hello, Python' 1.3.2 Inline code embeded in a Markdown source \"Inline code\" is a powerful feature of Pheasant. Any executable codes surrounded by {{ and }} are automatically executed and the codes are replaced with the execution result. For example, {{3*4}} becomes 12. Variables can be assigned in an inline code like this: {{name='Pheasant'}} . Then, \"I'm {{name}}.\" becomes \"I'm Pheasant.\" 1.3.3 Visualization Pheasant supports various output formats other than the standard stream ( stdout / stderr ) or a plain text output. For example, you can create a PNG image using Matplotlib . First, import the Matplotlib plotting library. ```python import matplotlib.pyplot as plt ``` import matplotlib.pyplot as plt [7] 2020-05-19 14:00:45 ( 111ms ) python3 ( 132ms ) Plot a line. ```python plt.plot([1, 2]) ``` plt.plot([1, 2]) [8] 2020-05-19 14:00:46 ( 119ms ) python3 ( 251ms ) [<matplotlib.lines.Line2D at 0x1f95b6341c8>] Execution of the above Markdown source on a Jupyter client creates a plain text output as an execute result and a PNG image as display data. You may want to display only the image. You can set inline option to a fenced code after a language identifier: ```python inline plt.plot([1, 3]) ``` Or use an inline code directly: {{plt.plot([1, 4])}} 1.3.4 Auto numbering of headers, figures, tables, etc . As you can see, all of headers are numbered in this document. This numbering has done by Pheasant automatically. In addition, Pheasant can count the number of figures, tables, etc . and give the identical number to each object. You can use a special \"header\" statement for figure, table, etc . to number them like below: #Fig Markdown link for an image can be numbered. {#cat#} ![jpg](img/cat.jpg) Figure 1 Markdown link for an image can be numbered. Supported numbered headers are shown in Table 1 : Table 1 Supported numbered headers Type Markdown (case-insensitive) Header # (title) Figure #Figure (title), #Fig (title) Table #Table (title), #Tab (title) Equation #Eq (equation), #Eq* (equation) [other] #[other] (title) In the above Markdown source, {#<tag>#} is an ID tag for hyperlink described below. Off course, you can use any codes to create a figure. #Figure A Matplotlib figure ```python plt.plot([2, 4]) ``` Figure 2 A Matplotlib figure Like figures, tables can be numbered. #Table A Markdown table a | b --|-- 0 | 1 2 | 3 Table 2 A Markdown table a b 0 1 2 3 Pandas 's DataFarme is useful to create a table programmatically. #Table A Pandas's DataFrame ```python import pandas as pd pd.DataFrame([[1, 2], [3, 4]], index=list('XY'), columns=list('ab')) ``` Table 3 A Pandas's DataFrame a b X 1 2 Y 3 4 A plain Markdown source which is not processed by Pheasant has to be separated by a blank line from the following Markdown source which is not a part of the figure or table. If a figure or table has blank lines within it, you have to write the content in a fenced code with tilde ( ~~~ ). #Fig A figure with a blank line ~~~ ![jpg](img/cat.jpg) ![jpg](img/cat.jpg) ~~~ Figure 3 A figure with a blank line In addition, Pheasant provides an easy way to number objects regardless of whether they actually have any blank lines or not. Try this: #Figure {{plt.plot([1, 5])}} Numbered figure using an inline code. Figure 4 Numbered figure using an inline code. 1.3.5 Hyperlink Numbered objects are linked from Markdown source like below: For example, go to Fig. {#cat#} For example, go to Fig. 1 You can add an external link in a header. #### MkDocs (https://www.mkdocs.org/) 1.3.5.1 MkDocs 1.3.6 Inspect source (Python only) inspect option to get source. 1.3.6.1 Source code in a code cell ```python inspect def func(x): return x + 2 func ``` def func(x): return x + 2 func? [14] 2020-05-19 14:00:46 ( 5.00ms ) (inspect) python3 ( 595ms ) def func(x): return x + 2 1.3.6.2 Source code from file ```python inspect from pheasant.renderers.jupyter.jupyter import Cell Cell ``` from pheasant.renderers.jupyter.jupyter import Cell Cell? [15] 2020-05-19 14:00:46 ( 5.00ms ) (inspect) python3 ( 616ms ) class Cell: code: str context: Dict[str, str] template: str valid: bool = field(default=True, init=False) cached: bool = field(default=False, compare=False) output: str = field(default=\"\", compare=False) extra_module: str = field(default=\"\", compare=False) 1.3.6.3 Inline mode (with custom 'Code' header) #Code {{ func # inspect }} Code 1 def func(x): return x + 2","title":"Pheasant"},{"location":"#1-pheasant-documentation","text":"","title":"1 Pheasant Documentation"},{"location":"#11-overview","text":"Welcome to Pheasant. Pheasant is a Markdown converter which is designed to work with MkDocs as a plugin. Highlights include: Auto generation of outputs for a fenced code block or inline code in Markdown source using Jupyter client . The code language is not restricted to Python. Auto numbering of headers, figures, tables, and etc. Numbered objects can be linked from other Markdown sources.","title":"1.1 Overview"},{"location":"#12-installation","text":"You can install Pheasant from PyPI. $ pip install pheasant If you use Pheasant as a plugin of MkDocs, you also need to install it (version 1.1.1 or later is required). $ pip install mkdocs In your mkdocs.yml , add lines below to register Pheasant as a MkDocs plugin. plugins: - pheasant","title":"1.2 Installation"},{"location":"#13-getting-started","text":"","title":"1.3 Getting Started"},{"location":"#131-auto-generation-of-the-executed-outputs-with-jupyter-client","text":"In a markdown fenced code below, ```python print(1) ``` a print function is executed via Jupyter client and converted into HTML: <div class=\"input\"><pre><code class=\"python\">print(1)</code></pre></div> <div class=\"stdout\"><pre><code class=\"nohighlight\">1</code></pre></div> Then, finally rendered as: print(1) [1] 2020-05-19 14:00:45 ( 4.00ms ) python3 ( 7.00ms ) 1 Other language code can be executed if a kernel for the language has been installed. For example, ```julia println(\"Hello, IJulia!\") ``` println(\"Hello, IJulia!\") [2] ( ) ( ) You can check the kernel name and its total execution time during the conversion process at the right side of an input cell. Like Jupyter Notebook , the last object in a code cell is displayed as the output of the cell. ```python greeting = 'Hello, Python' greeting ``` greeting = 'Hello, Python' greeting [3] 2020-05-19 14:00:45 ( 5.00ms ) python3 ( 12.0ms ) 'Hello, Python'","title":"1.3.1 Auto generation of the executed outputs with Jupyter client"},{"location":"#132-inline-code-embeded-in-a-markdown-source","text":"\"Inline code\" is a powerful feature of Pheasant. Any executable codes surrounded by {{ and }} are automatically executed and the codes are replaced with the execution result. For example, {{3*4}} becomes 12. Variables can be assigned in an inline code like this: {{name='Pheasant'}} . Then, \"I'm {{name}}.\" becomes \"I'm Pheasant.\"","title":"1.3.2 Inline code embeded in a Markdown source"},{"location":"#133-visualization","text":"Pheasant supports various output formats other than the standard stream ( stdout / stderr ) or a plain text output. For example, you can create a PNG image using Matplotlib . First, import the Matplotlib plotting library. ```python import matplotlib.pyplot as plt ``` import matplotlib.pyplot as plt [7] 2020-05-19 14:00:45 ( 111ms ) python3 ( 132ms ) Plot a line. ```python plt.plot([1, 2]) ``` plt.plot([1, 2]) [8] 2020-05-19 14:00:46 ( 119ms ) python3 ( 251ms ) [<matplotlib.lines.Line2D at 0x1f95b6341c8>] Execution of the above Markdown source on a Jupyter client creates a plain text output as an execute result and a PNG image as display data. You may want to display only the image. You can set inline option to a fenced code after a language identifier: ```python inline plt.plot([1, 3]) ``` Or use an inline code directly: {{plt.plot([1, 4])}}","title":"1.3.3 Visualization"},{"location":"#134-auto-numbering-of-headers-figures-tables-etc","text":"As you can see, all of headers are numbered in this document. This numbering has done by Pheasant automatically. In addition, Pheasant can count the number of figures, tables, etc . and give the identical number to each object. You can use a special \"header\" statement for figure, table, etc . to number them like below: #Fig Markdown link for an image can be numbered. {#cat#} ![jpg](img/cat.jpg) Figure 1 Markdown link for an image can be numbered. Supported numbered headers are shown in Table 1 : Table 1 Supported numbered headers Type Markdown (case-insensitive) Header # (title) Figure #Figure (title), #Fig (title) Table #Table (title), #Tab (title) Equation #Eq (equation), #Eq* (equation) [other] #[other] (title) In the above Markdown source, {#<tag>#} is an ID tag for hyperlink described below. Off course, you can use any codes to create a figure. #Figure A Matplotlib figure ```python plt.plot([2, 4]) ``` Figure 2 A Matplotlib figure Like figures, tables can be numbered. #Table A Markdown table a | b --|-- 0 | 1 2 | 3 Table 2 A Markdown table a b 0 1 2 3 Pandas 's DataFarme is useful to create a table programmatically. #Table A Pandas's DataFrame ```python import pandas as pd pd.DataFrame([[1, 2], [3, 4]], index=list('XY'), columns=list('ab')) ``` Table 3 A Pandas's DataFrame a b X 1 2 Y 3 4 A plain Markdown source which is not processed by Pheasant has to be separated by a blank line from the following Markdown source which is not a part of the figure or table. If a figure or table has blank lines within it, you have to write the content in a fenced code with tilde ( ~~~ ). #Fig A figure with a blank line ~~~ ![jpg](img/cat.jpg) ![jpg](img/cat.jpg) ~~~ Figure 3 A figure with a blank line In addition, Pheasant provides an easy way to number objects regardless of whether they actually have any blank lines or not. Try this: #Figure {{plt.plot([1, 5])}} Numbered figure using an inline code. Figure 4 Numbered figure using an inline code.","title":"1.3.4 Auto numbering of headers, figures, tables, etc."},{"location":"#135-hyperlink","text":"Numbered objects are linked from Markdown source like below: For example, go to Fig. {#cat#} For example, go to Fig. 1 You can add an external link in a header. #### MkDocs (https://www.mkdocs.org/)","title":"1.3.5 Hyperlink"},{"location":"#1351-mkdocs","text":"","title":"1.3.5.1 MkDocs"},{"location":"#136-inspect-source-python-only","text":"inspect option to get source.","title":"1.3.6 Inspect source (Python only)"},{"location":"#1361-source-code-in-a-code-cell","text":"```python inspect def func(x): return x + 2 func ``` def func(x): return x + 2 func? [14] 2020-05-19 14:00:46 ( 5.00ms ) (inspect) python3 ( 595ms ) def func(x): return x + 2","title":"1.3.6.1 Source code in a code cell"},{"location":"#1362-source-code-from-file","text":"```python inspect from pheasant.renderers.jupyter.jupyter import Cell Cell ``` from pheasant.renderers.jupyter.jupyter import Cell Cell? [15] 2020-05-19 14:00:46 ( 5.00ms ) (inspect) python3 ( 616ms ) class Cell: code: str context: Dict[str, str] template: str valid: bool = field(default=True, init=False) cached: bool = field(default=False, compare=False) output: str = field(default=\"\", compare=False) extra_module: str = field(default=\"\", compare=False)","title":"1.3.6.2 Source code from file"},{"location":"#1363-inline-mode-with-custom-code-header","text":"#Code {{ func # inspect }} Code 1 def func(x): return x + 2","title":"1.3.6.3 Inline mode (with custom 'Code' header)"},{"location":"about/license/","text":"License Copyright (c) 2017 daizutabi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/license/#license","text":"Copyright (c) 2017 daizutabi Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"about/release-notes/","text":"Release Notes Upgrading To upgrade Pheasant to the latest version, use pip: $ pip install -U pheasant You can check your currently installed version using pheasant --version : $ pheasant --version pheasant, version 2.5.6 from /path/to/pheasant (Python 3.7) Change log Version 2.5.7 (2020-05-26) New inline code \" # cache:clear \" to clear cache. Version 2.5.6 (2020-05-26) New options for MkDocs plugin (for Python only). cur_dir : Change current directory. page : each page docs : docs_dir of mkdocs.yml config : directory of mkdocs.yml . sys_paths : List of paths to insert to sys.path . Version 2.5.5 (2020-05-19) Inspect of dataclass is supported. Version 2.5.4 (2020-05-19) Admonition supported. The pheasant theme css updated. Version 2.5.3 (2020-05-19) Docstring like \"\"\"markdown or \"\"\"md is converted into Markdown in python file. Version 2.5.2 (2020-05-11) Default behavior changed: Now, header numbering doesn't occur unless users set it explicitly. To enable numbering, in mkdocs.yaml: plugins: - pheasant: nav_number: true Version 2.4.2 (2020-03-11) Current directory ( os.curdir ) of Python jupyter kernel is automatically changed to the directory in which the current page exists. Version 2.4.1 (2020-03-11) To disable numbering, in mkdocs.yaml: plugins: - pheasant: header: disabled: true Version 2.4.0 (2020-03-08) Support for MkDocs 1.1 Version 2.2.33 (2019-05-26) Configurable link like {# tag | Ch 1 Sec 2 #} Version 2.2.32 (2019-05-14) freeze option to keep the cache. Version 2.2.31 (2019-05-11) inspect option to get source. Bug fixed: Update cache for code with an unknown kernel name. Version 2.2.30 (2019-05-10) jupyter.kernel: raises NameError to delete cache and rerun. Version 2.2.29 (2019-05-09) Bug fixed: utils.latex Version 2.2.28 (2019-05-09) Script renderer: # %% -type inline comment to define a code cell. Version 2.2.27 (2019-05-07) dirty mode in Converter for MkDocs serve command. Version 2.2.25 (2019-05-06) Display support for jpeg and gif. Version 2.2.24 (2019-05-05) pheasant.utils.latex module to create LaTeX strings. Version 2.2.22 (2019-05-02) Build documentation without nav . Version 2.2.21 (2019-04-29) Add version config for pheasant plugin. Version 2.2.20 (2019-04-26) Print text output from Jupyter Kernel in verbose mode. Version 2.2.19 (2019-04-23) Use IPython formatter to display rich data. Version 2.2.18 (2019-04-21) CLI: pheasant run --restart command to restart kernel. CLI: pheasant run --force command to delete cache. Version 2.2.17 (2019-04-21) CLI: pheasant clean command accepts normal source args. Version 2.2.16 (2019-04-20) Remove cache if mismatch occurs in safe mode. Version 2.2.15 (2019-04-17) New progress bar with multi-step. Cache system reconstructed. Version 2.2.14 (2019-04-16) pheasant --clear -> pheasant clean . New progress bar Version 2.2.13 (2019-04-15) Delete cache: pheasant --clear . Version 2.2.12 (2019-04-15) Cache on jupyter renderer. Version 2.2.11 (2019-04-15) Cache includes page toc. Version 2.2.10 (2019-04-15) External link from section headers. Version 2.2.9 (2019-04-15) Delete jQuery tooltip for stability. Version 2.2.8 (2019-04-13) Allow directory in nav entry for automatic page collection. Version 2.2.7 (2019-04-12) PheasantPlugin: introduce cache system. Version 2.2.6 (2019-04-11) Script render: bug fix for list notations. Version 2.2.5 (2019-04-10) Custom theme for documentation. Retry kernel start when timeout. Version 2.2.4 (2019-04-10) Prompt icons. Version 2.2.3 (2019-04-09) termcolor. Version 2.2.2 (2019-04-09) CSS/JS update. Version 2.2.0 (2019-04-09) Rewrite MANIFEST.in, setup.py Version 2.1.6 (2019-04-08) Add progress bar for jupyter converter. Version 2.1.5 (2019-04-07) Add pheasant.js for show/hide source. Version 2.1.4 (2019-04-07) Add link to extra_css and extra_javascript (theme/pheasant.yml) Version 2.1.3 (2019-04-06) Multi-line header for python script. # # a\\n# # b\\n -> # # a b\\n Version 2.1.2 (2019-04-06) Bug fix: Altair plot with a True option (True -> true) Version 2.1.1 (2019-04-05) Header: reset numbering with a '!' character. # !Title\\n or just #!\\n . Version 2.1.0 (2019-04-04) Add feature to import extra pages. Jupyter: multi-stdout/err into a joined cell. Version 2.0.13 (2019-04-04) Page selection if page titles end with * (MkDocs Plugin). Version 2.0.11 (2019-04-03) Skip files not in nav (MkDocs Plugin). Version 2.0.10 (2019-04-02) SymPy and numbered equation supported. Version 2.0.4 (2019-03-28) Altair plot can be embeded. Version 2.0.3 (2019-03-27) New Embed converter replacing Code converter. Version 2.0.1 (2019-03-26) Scritpt converter: docstring bug fix. Version 2.0.0 (2019-03-26) Drop Python 3.6 support in favor of Python 3.7 dataclass. Macro converter: deleted. Version 1.2.2 (2019-03-10) Macro converter: inline code enabled powered by Jupyter converter. Version 1.2.1 (2019-03-10) Script converter: bug fix for escape code. Version 1.2.0 (2019-03-10) New Script converter for pure Python code ('.py'). Version 1.1.0 (2019-03-07) Black formatted. Drop dependency on nbconvert and nbformat . Code is executed as a plain source instead of a Jupyter Notebook's cell. Kernel client's execute_interactive method invoked instead of execute method. The method is new in Version 5.0 of jupyter_client . Version 1.0.0 (2019-03-05) First major release.","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"","title":"Release Notes"},{"location":"about/release-notes/#upgrading","text":"To upgrade Pheasant to the latest version, use pip: $ pip install -U pheasant You can check your currently installed version using pheasant --version : $ pheasant --version pheasant, version 2.5.6 from /path/to/pheasant (Python 3.7)","title":"Upgrading"},{"location":"about/release-notes/#change-log","text":"","title":"Change log"},{"location":"about/release-notes/#version-257-2020-05-26","text":"New inline code \" # cache:clear \" to clear cache.","title":"Version 2.5.7 (2020-05-26)"},{"location":"about/release-notes/#version-256-2020-05-26","text":"New options for MkDocs plugin (for Python only). cur_dir : Change current directory. page : each page docs : docs_dir of mkdocs.yml config : directory of mkdocs.yml . sys_paths : List of paths to insert to sys.path .","title":"Version 2.5.6 (2020-05-26)"},{"location":"about/release-notes/#version-255-2020-05-19","text":"Inspect of dataclass is supported.","title":"Version 2.5.5 (2020-05-19)"},{"location":"about/release-notes/#version-254-2020-05-19","text":"Admonition supported. The pheasant theme css updated.","title":"Version 2.5.4 (2020-05-19)"},{"location":"about/release-notes/#version-253-2020-05-19","text":"Docstring like \"\"\"markdown or \"\"\"md is converted into Markdown in python file.","title":"Version 2.5.3 (2020-05-19)"},{"location":"about/release-notes/#version-252-2020-05-11","text":"Default behavior changed: Now, header numbering doesn't occur unless users set it explicitly. To enable numbering, in mkdocs.yaml: plugins: - pheasant: nav_number: true","title":"Version 2.5.2 (2020-05-11)"},{"location":"about/release-notes/#version-242-2020-03-11","text":"Current directory ( os.curdir ) of Python jupyter kernel is automatically changed to the directory in which the current page exists.","title":"Version 2.4.2 (2020-03-11)"},{"location":"about/release-notes/#version-241-2020-03-11","text":"To disable numbering, in mkdocs.yaml: plugins: - pheasant: header: disabled: true","title":"Version 2.4.1 (2020-03-11)"},{"location":"about/release-notes/#version-240-2020-03-08","text":"Support for MkDocs 1.1","title":"Version 2.4.0 (2020-03-08)"},{"location":"about/release-notes/#version-2233-2019-05-26","text":"Configurable link like {# tag | Ch 1 Sec 2 #}","title":"Version 2.2.33 (2019-05-26)"},{"location":"about/release-notes/#version-2232-2019-05-14","text":"freeze option to keep the cache.","title":"Version 2.2.32 (2019-05-14)"},{"location":"about/release-notes/#version-2231-2019-05-11","text":"inspect option to get source. Bug fixed: Update cache for code with an unknown kernel name.","title":"Version 2.2.31 (2019-05-11)"},{"location":"about/release-notes/#version-2230-2019-05-10","text":"jupyter.kernel: raises NameError to delete cache and rerun.","title":"Version 2.2.30 (2019-05-10)"},{"location":"about/release-notes/#version-2229-2019-05-09","text":"Bug fixed: utils.latex","title":"Version 2.2.29 (2019-05-09)"},{"location":"about/release-notes/#version-2228-2019-05-09","text":"Script renderer: # %% -type inline comment to define a code cell.","title":"Version 2.2.28 (2019-05-09)"},{"location":"about/release-notes/#version-2227-2019-05-07","text":"dirty mode in Converter for MkDocs serve command.","title":"Version 2.2.27 (2019-05-07)"},{"location":"about/release-notes/#version-2225-2019-05-06","text":"Display support for jpeg and gif.","title":"Version 2.2.25 (2019-05-06)"},{"location":"about/release-notes/#version-2224-2019-05-05","text":"pheasant.utils.latex module to create LaTeX strings.","title":"Version 2.2.24 (2019-05-05)"},{"location":"about/release-notes/#version-2222-2019-05-02","text":"Build documentation without nav .","title":"Version 2.2.22 (2019-05-02)"},{"location":"about/release-notes/#version-2221-2019-04-29","text":"Add version config for pheasant plugin.","title":"Version 2.2.21 (2019-04-29)"},{"location":"about/release-notes/#version-2220-2019-04-26","text":"Print text output from Jupyter Kernel in verbose mode.","title":"Version 2.2.20 (2019-04-26)"},{"location":"about/release-notes/#version-2219-2019-04-23","text":"Use IPython formatter to display rich data.","title":"Version 2.2.19 (2019-04-23)"},{"location":"about/release-notes/#version-2218-2019-04-21","text":"CLI: pheasant run --restart command to restart kernel. CLI: pheasant run --force command to delete cache.","title":"Version 2.2.18 (2019-04-21)"},{"location":"about/release-notes/#version-2217-2019-04-21","text":"CLI: pheasant clean command accepts normal source args.","title":"Version 2.2.17 (2019-04-21)"},{"location":"about/release-notes/#version-2216-2019-04-20","text":"Remove cache if mismatch occurs in safe mode.","title":"Version 2.2.16 (2019-04-20)"},{"location":"about/release-notes/#version-2215-2019-04-17","text":"New progress bar with multi-step. Cache system reconstructed.","title":"Version 2.2.15 (2019-04-17)"},{"location":"about/release-notes/#version-2214-2019-04-16","text":"pheasant --clear -> pheasant clean . New progress bar","title":"Version 2.2.14 (2019-04-16)"},{"location":"about/release-notes/#version-2213-2019-04-15","text":"Delete cache: pheasant --clear .","title":"Version 2.2.13 (2019-04-15)"},{"location":"about/release-notes/#version-2212-2019-04-15","text":"Cache on jupyter renderer.","title":"Version 2.2.12 (2019-04-15)"},{"location":"about/release-notes/#version-2211-2019-04-15","text":"Cache includes page toc.","title":"Version 2.2.11 (2019-04-15)"},{"location":"about/release-notes/#version-2210-2019-04-15","text":"External link from section headers.","title":"Version 2.2.10 (2019-04-15)"},{"location":"about/release-notes/#version-229-2019-04-15","text":"Delete jQuery tooltip for stability.","title":"Version 2.2.9 (2019-04-15)"},{"location":"about/release-notes/#version-228-2019-04-13","text":"Allow directory in nav entry for automatic page collection.","title":"Version 2.2.8 (2019-04-13)"},{"location":"about/release-notes/#version-227-2019-04-12","text":"PheasantPlugin: introduce cache system.","title":"Version 2.2.7 (2019-04-12)"},{"location":"about/release-notes/#version-226-2019-04-11","text":"Script render: bug fix for list notations.","title":"Version 2.2.6 (2019-04-11)"},{"location":"about/release-notes/#version-225-2019-04-10","text":"Custom theme for documentation. Retry kernel start when timeout.","title":"Version 2.2.5 (2019-04-10)"},{"location":"about/release-notes/#version-224-2019-04-10","text":"Prompt icons.","title":"Version 2.2.4 (2019-04-10)"},{"location":"about/release-notes/#version-223-2019-04-09","text":"termcolor.","title":"Version 2.2.3 (2019-04-09)"},{"location":"about/release-notes/#version-222-2019-04-09","text":"CSS/JS update.","title":"Version 2.2.2 (2019-04-09)"},{"location":"about/release-notes/#version-220-2019-04-09","text":"Rewrite MANIFEST.in, setup.py","title":"Version 2.2.0 (2019-04-09)"},{"location":"about/release-notes/#version-216-2019-04-08","text":"Add progress bar for jupyter converter.","title":"Version 2.1.6 (2019-04-08)"},{"location":"about/release-notes/#version-215-2019-04-07","text":"Add pheasant.js for show/hide source.","title":"Version 2.1.5 (2019-04-07)"},{"location":"about/release-notes/#version-214-2019-04-07","text":"Add link to extra_css and extra_javascript (theme/pheasant.yml)","title":"Version 2.1.4 (2019-04-07)"},{"location":"about/release-notes/#version-213-2019-04-06","text":"Multi-line header for python script. # # a\\n# # b\\n -> # # a b\\n","title":"Version 2.1.3 (2019-04-06)"},{"location":"about/release-notes/#version-212-2019-04-06","text":"Bug fix: Altair plot with a True option (True -> true)","title":"Version 2.1.2 (2019-04-06)"},{"location":"about/release-notes/#version-211-2019-04-05","text":"Header: reset numbering with a '!' character. # !Title\\n or just #!\\n .","title":"Version 2.1.1 (2019-04-05)"},{"location":"about/release-notes/#version-210-2019-04-04","text":"Add feature to import extra pages. Jupyter: multi-stdout/err into a joined cell.","title":"Version 2.1.0 (2019-04-04)"},{"location":"about/release-notes/#version-2013-2019-04-04","text":"Page selection if page titles end with * (MkDocs Plugin).","title":"Version 2.0.13 (2019-04-04)"},{"location":"about/release-notes/#version-2011-2019-04-03","text":"Skip files not in nav (MkDocs Plugin).","title":"Version 2.0.11 (2019-04-03)"},{"location":"about/release-notes/#version-2010-2019-04-02","text":"SymPy and numbered equation supported.","title":"Version 2.0.10 (2019-04-02)"},{"location":"about/release-notes/#version-204-2019-03-28","text":"Altair plot can be embeded.","title":"Version 2.0.4 (2019-03-28)"},{"location":"about/release-notes/#version-203-2019-03-27","text":"New Embed converter replacing Code converter.","title":"Version 2.0.3 (2019-03-27)"},{"location":"about/release-notes/#version-201-2019-03-26","text":"Scritpt converter: docstring bug fix.","title":"Version 2.0.1 (2019-03-26)"},{"location":"about/release-notes/#version-200-2019-03-26","text":"Drop Python 3.6 support in favor of Python 3.7 dataclass. Macro converter: deleted.","title":"Version 2.0.0 (2019-03-26)"},{"location":"about/release-notes/#version-122-2019-03-10","text":"Macro converter: inline code enabled powered by Jupyter converter.","title":"Version 1.2.2 (2019-03-10)"},{"location":"about/release-notes/#version-121-2019-03-10","text":"Script converter: bug fix for escape code.","title":"Version 1.2.1 (2019-03-10)"},{"location":"about/release-notes/#version-120-2019-03-10","text":"New Script converter for pure Python code ('.py').","title":"Version 1.2.0 (2019-03-10)"},{"location":"about/release-notes/#version-110-2019-03-07","text":"Black formatted. Drop dependency on nbconvert and nbformat . Code is executed as a plain source instead of a Jupyter Notebook's cell. Kernel client's execute_interactive method invoked instead of execute method. The method is new in Version 5.0 of jupyter_client .","title":"Version 1.1.0 (2019-03-07)"},{"location":"about/release-notes/#version-100-2019-03-05","text":"First major release.","title":"Version 1.0.0 (2019-03-05)"},{"location":"user-guide/cell/","text":"6 Cell Markers # %% [markdown] # ## Markdown Header # Text. Text. # %% [code] # comment a = 1 print(a) 6.1 Markdown Header Text. Text. # comment a = 1 print(a) [1] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 1.06s ) 1","title":"Cell"},{"location":"user-guide/cell/#6-cell-markers","text":"# %% [markdown] # ## Markdown Header # Text. Text. # %% [code] # comment a = 1 print(a)","title":"6 Cell Markers"},{"location":"user-guide/cell/#61-markdown-header","text":"Text. Text. # comment a = 1 print(a) [1] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 1.06s ) 1","title":"6.1 Markdown Header"},{"location":"user-guide/embed/","text":"3 Embeded objects Pheasant can embed codes from source files or include other source files. 3.1 Embeded codes Extenal source files are read from file system by Pheasant syntax: {%=object%} . For example, {%=/mkdocs.yml%} writes the content of the real mkdocs.yml of this document: site_name: Pheasant site_url: https://pheasant.daizutabi.net/ site_description: Project documentation with MkDocs. site_author: daizutabi site_dir: ../pheasant-site/site repo_url: https://github.com/daizutabi/pheasant/ edit_uri: \"\" theme: ivory # theme: readthedocs plugins: - search - pheasant: version: pheasant nav_number: true nav: - Pheasant: index.md - User Guide: - Images: user-guide/images.md - Embed: user-guide/embed.md - SymPy: user-guide/sympy.md - Script: user-guide/script.py - Cell: user-guide/cell.py - Kernel: user-guide/kernel.md - About: - Release Notes: about/release-notes.md - License: about/license.md markdown_extensions: - admonition - pymdownx.arithmatex The root directory is the directory where mkdocs.yml exists. If the file is too long to display the whole content, you can specify the lines as the same way of Python's slice notation. {%=/mkdocs.yml[3:8]%} site_author: daizutabi site_dir: ../pheasant-site/site repo_url: https://github.com/daizutabi/pheasant/ edit_uri: \"\" Imported file can be numbered like figures and tables. Use this inline notation: #File {%=/mkdocs.yml[:8]%} File 1 site_name: Pheasant site_url: https://pheasant.daizutabi.net/ site_description: Project documentation with MkDocs. site_author: daizutabi site_dir: ../pheasant-site/site repo_url: https://github.com/daizutabi/pheasant/ edit_uri: \"\" 3.2 Include other file as Markdown source. Assume that there is a directory named link under the same directory of this file and there are some files under the link directory. You can include the content of a file like below: {% link/included.md %} [The content of included.md ] You can also include a pure Python source code. {% link/included.py %} Script can be included. def func(x, y): return x + y [1] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 953ms ) If the included file contains header statements, the document structure may be broken. For example, a file to be included contains: File 2 link/section.md # Title ## Section Text. If you include the file, a new <h1> section starts that you don't want to. To maintain the document structure, you can shift the header level like below. Note that we are under a <h2> section now. {% link/section.md>2 %} In this case, \" # Title \" becomes \" ### Title \" by \" >2 \".","title":"Embed"},{"location":"user-guide/embed/#3-embeded-objects","text":"Pheasant can embed codes from source files or include other source files.","title":"3 Embeded objects"},{"location":"user-guide/embed/#31-embeded-codes","text":"Extenal source files are read from file system by Pheasant syntax: {%=object%} . For example, {%=/mkdocs.yml%} writes the content of the real mkdocs.yml of this document: site_name: Pheasant site_url: https://pheasant.daizutabi.net/ site_description: Project documentation with MkDocs. site_author: daizutabi site_dir: ../pheasant-site/site repo_url: https://github.com/daizutabi/pheasant/ edit_uri: \"\" theme: ivory # theme: readthedocs plugins: - search - pheasant: version: pheasant nav_number: true nav: - Pheasant: index.md - User Guide: - Images: user-guide/images.md - Embed: user-guide/embed.md - SymPy: user-guide/sympy.md - Script: user-guide/script.py - Cell: user-guide/cell.py - Kernel: user-guide/kernel.md - About: - Release Notes: about/release-notes.md - License: about/license.md markdown_extensions: - admonition - pymdownx.arithmatex The root directory is the directory where mkdocs.yml exists. If the file is too long to display the whole content, you can specify the lines as the same way of Python's slice notation. {%=/mkdocs.yml[3:8]%} site_author: daizutabi site_dir: ../pheasant-site/site repo_url: https://github.com/daizutabi/pheasant/ edit_uri: \"\" Imported file can be numbered like figures and tables. Use this inline notation: #File {%=/mkdocs.yml[:8]%} File 1 site_name: Pheasant site_url: https://pheasant.daizutabi.net/ site_description: Project documentation with MkDocs. site_author: daizutabi site_dir: ../pheasant-site/site repo_url: https://github.com/daizutabi/pheasant/ edit_uri: \"\"","title":"3.1 Embeded codes"},{"location":"user-guide/embed/#32-include-other-file-as-markdown-source","text":"Assume that there is a directory named link under the same directory of this file and there are some files under the link directory. You can include the content of a file like below: {% link/included.md %} [The content of included.md ] You can also include a pure Python source code. {% link/included.py %} Script can be included. def func(x, y): return x + y [1] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 953ms ) If the included file contains header statements, the document structure may be broken. For example, a file to be included contains: File 2 link/section.md # Title ## Section Text. If you include the file, a new <h1> section starts that you don't want to. To maintain the document structure, you can shift the header level like below. Note that we are under a <h2> section now. {% link/section.md>2 %} In this case, \" # Title \" becomes \" ### Title \" by \" >2 \".","title":"3.2 Include other file as Markdown source."},{"location":"user-guide/images/","text":".vega-actions a { margin-right: 12px; color: #757575; font-weight: normal; font-size: 13px; } .error { color: red; } 2 Image In this section, we study how to embed images created by Matplotlib , Bokeh , and Altair libraries. 2.1 Matplotlib First, figsize of figure is set to [2, 1.6] to show small figures for saving space. import matplotlib import matplotlib.pyplot as plt matplotlib.rcParams['figure.figsize'] = [2, 1.6] [1] 2020-05-19 14:00:46 ( 4.00ms ) python3 ( 634ms ) A call of plt.plot generates a standard plain text output (a list of Line object in this example) and a PNG image as display data: plt.plot([1, 2, 4], marker='o') [2] 2020-05-19 14:00:46 ( 63.0ms ) python3 ( 697ms ) [<matplotlib.lines.Line2D at 0x1f95e9773c8>] If you want to hide the input source and the plain text output, you can use a inline option to show just the display data such as an image or HTML: ```python inline plt.plot([4, 2, 3], marker='o') ``` \"Inline code\" is useful to display a plot in shorthand notation. {{plt.plot([1, 2, 4])}} generates: Note that the plain text output ( [<matplotlib.lines...] ) does not displayed if the inline code generates display data. 2.2 Bokeh You can embed Bokeh 's plots into MkDocs HTML documents. Following User Guide \"Embedding Plots and Apps\" from the official Bokeh documents, Pheasant automatically adds extra stylesheet and javascript in HTML source. You don't need to configure extra_css and extra_javascript in your mkdocs.yml manually. In order to embed plots in your document, bokeh.embed.components function can be used. This function returns <script> and <div> tags in HTML format. For example: from bokeh.plotting import figure from bokeh.embed import components plot = figure(plot_width=250, plot_height=250) plot.circle([1, 2, 3, 4, 5], [1, 3, 3, 2, 4], size=10) script, div = components(plot) print('[script]:', script[:140].strip(), '...') print('[div]:', div[:40].strip(), '...') [5] 2020-05-19 14:00:46 ( 22.0ms ) python3 ( 844ms ) [script]: <script type=\"text/javascript\"> (function() { var fn = function() { Bokeh.safely(function() { (func ... [div]: <div class=\"bk-root\" id=\"31049df1-86d3- ... Pheasant uses this functionality inside automatically. You can get a Bokeh plot just write {{plot}} : (function() { var fn = function() { Bokeh.safely(function() { (function(root) { function embed_document(root) { var docs_json = '{&quot;a785fe22-2c17-4bd0-b085-4c96f4f24738&quot;:{&quot;roots&quot;:{&quot;references&quot;:[{&quot;attributes&quot;:{&quot;fill_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;line_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;size&quot;:{&quot;units&quot;:&quot;screen&quot;,&quot;value&quot;:10},&quot;x&quot;:{&quot;field&quot;:&quot;x&quot;},&quot;y&quot;:{&quot;field&quot;:&quot;y&quot;}},&quot;id&quot;:&quot;1033&quot;,&quot;type&quot;:&quot;Circle&quot;},{&quot;attributes&quot;:{&quot;formatter&quot;:{&quot;id&quot;:&quot;1039&quot;},&quot;ticker&quot;:{&quot;id&quot;:&quot;1011&quot;}},&quot;id&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;LinearAxis&quot;},{&quot;attributes&quot;:{&quot;below&quot;:[{&quot;id&quot;:&quot;1010&quot;}],&quot;center&quot;:[{&quot;id&quot;:&quot;1013&quot;},{&quot;id&quot;:&quot;1017&quot;}],&quot;left&quot;:[{&quot;id&quot;:&quot;1014&quot;}],&quot;plot_height&quot;:250,&quot;plot_width&quot;:250,&quot;renderers&quot;:[{&quot;id&quot;:&quot;1035&quot;}],&quot;title&quot;:{&quot;id&quot;:&quot;1037&quot;},&quot;toolbar&quot;:{&quot;id&quot;:&quot;1025&quot;},&quot;x_range&quot;:{&quot;id&quot;:&quot;1002&quot;},&quot;x_scale&quot;:{&quot;id&quot;:&quot;1006&quot;},&quot;y_range&quot;:{&quot;id&quot;:&quot;1004&quot;},&quot;y_scale&quot;:{&quot;id&quot;:&quot;1008&quot;}},&quot;id&quot;:&quot;1001&quot;,&quot;subtype&quot;:&quot;Figure&quot;,&quot;type&quot;:&quot;Plot&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1018&quot;,&quot;type&quot;:&quot;PanTool&quot;},{&quot;attributes&quot;:{&quot;overlay&quot;:{&quot;id&quot;:&quot;1024&quot;}},&quot;id&quot;:&quot;1020&quot;,&quot;type&quot;:&quot;BoxZoomTool&quot;},{&quot;attributes&quot;:{&quot;axis&quot;:{&quot;id&quot;:&quot;1010&quot;},&quot;ticker&quot;:null},&quot;id&quot;:&quot;1013&quot;,&quot;type&quot;:&quot;Grid&quot;},{&quot;attributes&quot;:{&quot;fill_alpha&quot;:{&quot;value&quot;:0.1},&quot;fill_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;line_alpha&quot;:{&quot;value&quot;:0.1},&quot;line_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;size&quot;:{&quot;units&quot;:&quot;screen&quot;,&quot;value&quot;:10},&quot;x&quot;:{&quot;field&quot;:&quot;x&quot;},&quot;y&quot;:{&quot;field&quot;:&quot;y&quot;}},&quot;id&quot;:&quot;1034&quot;,&quot;type&quot;:&quot;Circle&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1021&quot;,&quot;type&quot;:&quot;SaveTool&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1015&quot;,&quot;type&quot;:&quot;BasicTicker&quot;},{&quot;attributes&quot;:{&quot;formatter&quot;:{&quot;id&quot;:&quot;1041&quot;},&quot;ticker&quot;:{&quot;id&quot;:&quot;1015&quot;}},&quot;id&quot;:&quot;1014&quot;,&quot;type&quot;:&quot;LinearAxis&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1023&quot;,&quot;type&quot;:&quot;HelpTool&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1019&quot;,&quot;type&quot;:&quot;WheelZoomTool&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1022&quot;,&quot;type&quot;:&quot;ResetTool&quot;},{&quot;attributes&quot;:{&quot;source&quot;:{&quot;id&quot;:&quot;1032&quot;}},&quot;id&quot;:&quot;1036&quot;,&quot;type&quot;:&quot;CDSView&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1039&quot;,&quot;type&quot;:&quot;BasicTickFormatter&quot;},{&quot;attributes&quot;:{&quot;bottom_units&quot;:&quot;screen&quot;,&quot;fill_alpha&quot;:0.5,&quot;fill_color&quot;:&quot;lightgrey&quot;,&quot;left_units&quot;:&quot;screen&quot;,&quot;level&quot;:&quot;overlay&quot;,&quot;line_alpha&quot;:1.0,&quot;line_color&quot;:&quot;black&quot;,&quot;line_dash&quot;:[4,4],&quot;line_width&quot;:2,&quot;render_mode&quot;:&quot;css&quot;,&quot;right_units&quot;:&quot;screen&quot;,&quot;top_units&quot;:&quot;screen&quot;},&quot;id&quot;:&quot;1024&quot;,&quot;type&quot;:&quot;BoxAnnotation&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;DataRange1d&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1044&quot;,&quot;type&quot;:&quot;UnionRenderers&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1004&quot;,&quot;type&quot;:&quot;DataRange1d&quot;},{&quot;attributes&quot;:{&quot;axis&quot;:{&quot;id&quot;:&quot;1014&quot;},&quot;dimension&quot;:1,&quot;ticker&quot;:null},&quot;id&quot;:&quot;1017&quot;,&quot;type&quot;:&quot;Grid&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1006&quot;,&quot;type&quot;:&quot;LinearScale&quot;},{&quot;attributes&quot;:{&quot;active_drag&quot;:&quot;auto&quot;,&quot;active_inspect&quot;:&quot;auto&quot;,&quot;active_multi&quot;:null,&quot;active_scroll&quot;:&quot;auto&quot;,&quot;active_tap&quot;:&quot;auto&quot;,&quot;tools&quot;:[{&quot;id&quot;:&quot;1018&quot;},{&quot;id&quot;:&quot;1019&quot;},{&quot;id&quot;:&quot;1020&quot;},{&quot;id&quot;:&quot;1021&quot;},{&quot;id&quot;:&quot;1022&quot;},{&quot;id&quot;:&quot;1023&quot;}]},&quot;id&quot;:&quot;1025&quot;,&quot;type&quot;:&quot;Toolbar&quot;},{&quot;attributes&quot;:{&quot;data&quot;:{&quot;x&quot;:[1,2,3,4,5],&quot;y&quot;:[1,3,3,2,4]},&quot;selected&quot;:{&quot;id&quot;:&quot;1043&quot;},&quot;selection_policy&quot;:{&quot;id&quot;:&quot;1044&quot;}},&quot;id&quot;:&quot;1032&quot;,&quot;type&quot;:&quot;ColumnDataSource&quot;},{&quot;attributes&quot;:{&quot;data_source&quot;:{&quot;id&quot;:&quot;1032&quot;},&quot;glyph&quot;:{&quot;id&quot;:&quot;1033&quot;},&quot;hover_glyph&quot;:null,&quot;muted_glyph&quot;:null,&quot;nonselection_glyph&quot;:{&quot;id&quot;:&quot;1034&quot;},&quot;selection_glyph&quot;:null,&quot;view&quot;:{&quot;id&quot;:&quot;1036&quot;}},&quot;id&quot;:&quot;1035&quot;,&quot;type&quot;:&quot;GlyphRenderer&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1041&quot;,&quot;type&quot;:&quot;BasicTickFormatter&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1008&quot;,&quot;type&quot;:&quot;LinearScale&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1043&quot;,&quot;type&quot;:&quot;Selection&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1011&quot;,&quot;type&quot;:&quot;BasicTicker&quot;},{&quot;attributes&quot;:{&quot;text&quot;:&quot;&quot;},&quot;id&quot;:&quot;1037&quot;,&quot;type&quot;:&quot;Title&quot;}],&quot;root_ids&quot;:[&quot;1001&quot;]},&quot;title&quot;:&quot;Bokeh Application&quot;,&quot;version&quot;:&quot;2.0.2&quot;}}'; var render_items = [{\"docid\":\"a785fe22-2c17-4bd0-b085-4c96f4f24738\",\"root_ids\":[\"1001\"],\"roots\":{\"1001\":\"6dee2598-5b51-45fd-b281-0de4a0f43d34\"}}]; root.Bokeh.embed.embed_items(docs_json, render_items); } if (root.Bokeh !== undefined) { embed_document(root); } else { var attempts = 0; var timer = setInterval(function(root) { if (root.Bokeh !== undefined) { clearInterval(timer); embed_document(root); } else { attempts++; if (attempts > 100) { clearInterval(timer); console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\"); } } }, 10, root) } })(window); }); }; if (document.readyState != \"loading\") fn(); else document.addEventListener(\"DOMContentLoaded\", fn); })(); 2.3 Altair From official Example Gallery Simple Bar Chart import altair as alt import pandas as pd source = pd.DataFrame({ 'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], 'b': [28, 55, 43, 91, 81, 53, 19, 87, 52] }) alt.Chart(source).mark_bar().encode(x='a', y='b') [7] 2020-05-19 14:00:46 ( 23.0ms ) python3 ( 878ms ) document.addEventListener(\"DOMContentLoaded\", function(event) { var spec = {\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-c2a3e89ba9d5d1687d5e8c28d630a033\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"nominal\", \"field\": \"a\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"b\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-c2a3e89ba9d5d1687d5e8c28d630a033\": [{\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43}, {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53}, {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}]}}; var opt = { \"mode\": \"vega-lite\", \"renderer\": \"canvas\", \"actions\": {\"editor\": true, \"source\": true, \"export\": true} }; vegaEmbed(\"#pheasant-altair-1\", spec, opt).catch(console.err); }); Multi-Line Tooltip import altair as alt import pandas as pd import numpy as np np.random.seed(42) source = pd.DataFrame(np.cumsum(np.random.randn(100, 3), 0).round(2), columns=['A', 'B', 'C'], index=pd.RangeIndex(100, name='x')) source = source.reset_index().melt('x', var_name='category', value_name='y') # Create a selection that chooses the nearest point & selects based on x-value nearest = alt.selection(type='single', nearest=True, on='mouseover', fields=['x'], empty='none') # The basic line line = alt.Chart().mark_line(interpolate='basis').encode( x='x:Q', y='y:Q', color='category:N' ) # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart().mark_point().encode( x='x:Q', opacity=alt.value(0), ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align='left', dx=5, dy=-5).encode( text=alt.condition(nearest, 'y:Q', alt.value(' ')) ) # Draw a rule at the location of the selection rules = alt.Chart().mark_rule(color='gray').encode( x='x:Q', ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer(line, selectors, points, rules, text, data=source, width=400, height=300) [8] 2020-05-19 14:00:46 ( 69.0ms ) python3 ( 947ms ) document.addEventListener(\"DOMContentLoaded\", function(event) { var spec = {\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"line\", \"interpolate\": \"basis\"}, \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"category\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"y\"}}}, {\"mark\": \"point\", \"encoding\": {\"opacity\": {\"value\": 0}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}}, \"selection\": {\"selector001\": {\"type\": \"single\", \"nearest\": true, \"on\": \"mouseover\", \"fields\": [\"x\"], \"empty\": \"none\"}}}, {\"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"category\"}, \"opacity\": {\"condition\": {\"value\": 1, \"selection\": \"selector001\"}, \"value\": 0}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"y\"}}}, {\"mark\": {\"type\": \"rule\", \"color\": \"gray\"}, \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"x\"}}, \"transform\": [{\"filter\": {\"selection\": \"selector001\"}}]}, {\"mark\": {\"type\": \"text\", \"align\": \"left\", \"dx\": 5, \"dy\": -5}, \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"category\"}, \"text\": {\"condition\": {\"type\": \"quantitative\", \"field\": \"y\", \"selection\": \"selector001\"}, \"value\": \" \"}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"y\"}}}], \"data\": {\"name\": \"data-6721a5d73fc2eb4feb320b5cbb7cae62\"}, \"height\": 300, \"width\": 400, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-6721a5d73fc2eb4feb320b5cbb7cae62\": [{\"x\": 0, \"category\": \"A\", \"y\": 0.5}, {\"x\": 1, \"category\": \"A\", \"y\": 2.02}, {\"x\": 2, \"category\": \"A\", \"y\": 3.6}, {\"x\": 3, \"category\": \"A\", \"y\": 4.14}, {\"x\": 4, \"category\": \"A\", \"y\": 4.38}, {\"x\": 5, \"category\": \"A\", \"y\": 3.82}, {\"x\": 6, \"category\": \"A\", \"y\": 2.91}, {\"x\": 7, \"category\": \"A\", \"y\": 2.69}, {\"x\": 8, \"category\": \"A\", \"y\": 2.14}, {\"x\": 9, \"category\": \"A\", \"y\": 2.52}, {\"x\": 10, \"category\": \"A\", \"y\": 1.92}, {\"x\": 11, \"category\": \"A\", \"y\": 0.86}, {\"x\": 12, \"category\": \"A\", \"y\": 1.07}, {\"x\": 13, \"category\": \"A\", \"y\": 1.27}, {\"x\": 14, \"category\": \"A\", \"y\": 1.15}, {\"x\": 15, \"category\": \"A\", \"y\": 0.43}, {\"x\": 16, \"category\": \"A\", \"y\": 0.77}, {\"x\": 17, \"category\": \"A\", \"y\": 0.39}, {\"x\": 18, \"category\": \"A\", \"y\": 1.42}, {\"x\": 19, \"category\": \"A\", \"y\": 1.11}, {\"x\": 20, \"category\": \"A\", \"y\": 0.63}, {\"x\": 21, \"category\": \"A\", \"y\": -0.57}, {\"x\": 22, \"category\": \"A\", \"y\": -0.64}, {\"x\": 23, \"category\": \"A\", \"y\": -1.28}, {\"x\": 24, \"category\": \"A\", \"y\": -1.32}, {\"x\": 25, \"category\": \"A\", \"y\": -0.5}, {\"x\": 26, \"category\": \"A\", \"y\": -0.4}, {\"x\": 27, \"category\": \"A\", \"y\": -0.05}, {\"x\": 28, \"category\": \"A\", \"y\": -0.86}, {\"x\": 29, \"category\": \"A\", \"y\": -0.53}, {\"x\": 30, \"category\": \"A\", \"y\": -0.43}, {\"x\": 31, \"category\": \"A\", \"y\": -0.76}, {\"x\": 32, \"category\": \"A\", \"y\": -0.46}, {\"x\": 33, \"category\": \"A\", \"y\": -0.7}, {\"x\": 34, \"category\": \"A\", \"y\": -1.04}, {\"x\": 35, \"category\": \"A\", \"y\": -0.64}, {\"x\": 36, \"category\": \"A\", \"y\": -0.38}, {\"x\": 37, \"category\": \"A\", \"y\": -0.4}, {\"x\": 38, \"category\": \"A\", \"y\": -0.6}, {\"x\": 39, \"category\": \"A\", \"y\": -1.77}, {\"x\": 40, \"category\": \"A\", \"y\": -0.97}, {\"x\": 41, \"category\": \"A\", \"y\": -2.38}, {\"x\": 42, \"category\": \"A\", \"y\": -3.37}, {\"x\": 43, \"category\": \"A\", \"y\": -3.87}, {\"x\": 44, \"category\": \"A\", \"y\": -4.93}, {\"x\": 45, \"category\": \"A\", \"y\": -3.38}, {\"x\": 46, \"category\": \"A\", \"y\": -2.57}, {\"x\": 47, \"category\": \"A\", \"y\": -1.26}, {\"x\": 48, \"category\": \"A\", \"y\": -1.0}, {\"x\": 49, \"category\": \"A\", \"y\": -2.32}, {\"x\": 50, \"category\": \"A\", \"y\": -2.07}, {\"x\": 51, \"category\": \"A\", \"y\": -1.84}, {\"x\": 52, \"category\": \"A\", \"y\": 0.03}, {\"x\": 53, \"category\": \"A\", \"y\": 0.68}, {\"x\": 54, \"category\": \"A\", \"y\": 1.84}, {\"x\": 55, \"category\": \"A\", \"y\": 2.25}, {\"x\": 56, \"category\": \"A\", \"y\": 2.01}, {\"x\": 57, \"category\": \"A\", \"y\": 1.19}, {\"x\": 58, \"category\": \"A\", \"y\": 1.47}, {\"x\": 59, \"category\": \"A\", \"y\": 2.92}, {\"x\": 60, \"category\": \"A\", \"y\": 3.55}, {\"x\": 61, \"category\": \"A\", \"y\": 4.03}, {\"x\": 62, \"category\": \"A\", \"y\": 4.5}, {\"x\": 63, \"category\": \"A\", \"y\": 2.99}, {\"x\": 64, \"category\": \"A\", \"y\": 3.2}, {\"x\": 65, \"category\": \"A\", \"y\": 3.59}, {\"x\": 66, \"category\": \"A\", \"y\": 3.65}, {\"x\": 67, \"category\": \"A\", \"y\": 4.21}, {\"x\": 68, \"category\": \"A\", \"y\": 2.83}, {\"x\": 69, \"category\": \"A\", \"y\": 3.34}, {\"x\": 70, \"category\": \"A\", \"y\": 3.92}, {\"x\": 71, \"category\": \"A\", \"y\": 4.57}, {\"x\": 72, \"category\": \"A\", \"y\": 3.79}, {\"x\": 73, \"category\": \"A\", \"y\": 3.88}, {\"x\": 74, \"category\": \"A\", \"y\": 4.56}, {\"x\": 75, \"category\": \"A\", \"y\": 5.65}, {\"x\": 76, \"category\": \"A\", \"y\": 4.94}, {\"x\": 77, \"category\": \"A\", \"y\": 5.15}, {\"x\": 78, \"category\": \"A\", \"y\": 7.3}, {\"x\": 79, \"category\": \"A\", \"y\": 7.48}, {\"x\": 80, \"category\": \"A\", \"y\": 6.69}, {\"x\": 81, \"category\": \"A\", \"y\": 7.56}, {\"x\": 82, \"category\": \"A\", \"y\": 7.08}, {\"x\": 83, \"category\": \"A\", \"y\": 7.49}, {\"x\": 84, \"category\": \"A\", \"y\": 9.61}, {\"x\": 85, \"category\": \"A\", \"y\": 9.12}, {\"x\": 86, \"category\": \"A\", \"y\": 9.57}, {\"x\": 87, \"category\": \"A\", \"y\": 9.51}, {\"x\": 88, \"category\": \"A\", \"y\": 9.26}, {\"x\": 89, \"category\": \"A\", \"y\": 7.83}, {\"x\": 90, \"category\": \"A\", \"y\": 9.27}, {\"x\": 91, \"category\": \"A\", \"y\": 9.28}, {\"x\": 92, \"category\": \"A\", \"y\": 9.48}, {\"x\": 93, \"category\": \"A\", \"y\": 9.09}, {\"x\": 94, \"category\": \"A\", \"y\": 10.68}, {\"x\": 95, \"category\": \"A\", \"y\": 8.72}, {\"x\": 96, \"category\": \"A\", \"y\": 9.01}, {\"x\": 97, \"category\": \"A\", \"y\": 8.51}, {\"x\": 98, \"category\": \"A\", \"y\": 8.87}, {\"x\": 99, \"category\": \"A\", \"y\": 9.18}, {\"x\": 0, \"category\": \"B\", \"y\": -0.14}, {\"x\": 1, \"category\": \"B\", \"y\": -0.37}, {\"x\": 2, \"category\": \"B\", \"y\": 0.4}, {\"x\": 3, \"category\": \"B\", \"y\": -0.07}, {\"x\": 4, \"category\": \"B\", \"y\": -1.98}, {\"x\": 5, \"category\": \"B\", \"y\": -2.99}, {\"x\": 6, \"category\": \"B\", \"y\": -4.41}, {\"x\": 7, \"category\": \"B\", \"y\": -4.34}, {\"x\": 8, \"category\": \"B\", \"y\": -4.23}, {\"x\": 9, \"category\": \"B\", \"y\": -4.83}, {\"x\": 10, \"category\": \"B\", \"y\": -2.98}, {\"x\": 11, \"category\": \"B\", \"y\": -2.15}, {\"x\": 12, \"category\": \"B\", \"y\": -4.11}, {\"x\": 13, \"category\": \"B\", \"y\": -3.38}, {\"x\": 14, \"category\": \"B\", \"y\": -3.68}, {\"x\": 15, \"category\": \"B\", \"y\": -4.14}, {\"x\": 16, \"category\": \"B\", \"y\": -5.9}, {\"x\": 17, \"category\": \"B\", \"y\": -6.58}, {\"x\": 18, \"category\": \"B\", \"y\": -5.65}, {\"x\": 19, \"category\": \"B\", \"y\": -5.31}, {\"x\": 20, \"category\": \"B\", \"y\": -5.5}, {\"x\": 21, \"category\": \"B\", \"y\": -4.69}, {\"x\": 22, \"category\": \"B\", \"y\": -3.68}, {\"x\": 23, \"category\": \"B\", \"y\": -3.32}, {\"x\": 24, \"category\": \"B\", \"y\": -1.76}, {\"x\": 25, \"category\": \"B\", \"y\": -1.67}, {\"x\": 26, \"category\": \"B\", \"y\": -3.66}, {\"x\": 27, \"category\": \"B\", \"y\": -2.18}, {\"x\": 28, \"category\": \"B\", \"y\": -2.68}, {\"x\": 29, \"category\": \"B\", \"y\": -3.21}, {\"x\": 30, \"category\": \"B\", \"y\": -2.24}, {\"x\": 31, \"category\": \"B\", \"y\": -2.64}, {\"x\": 32, \"category\": \"B\", \"y\": -2.37}, {\"x\": 33, \"category\": \"B\", \"y\": -3.79}, {\"x\": 34, \"category\": \"B\", \"y\": -4.59}, {\"x\": 35, \"category\": \"B\", \"y\": -2.71}, {\"x\": 36, \"category\": \"B\", \"y\": -2.78}, {\"x\": 37, \"category\": \"B\", \"y\": -2.72}, {\"x\": 38, \"category\": \"B\", \"y\": -2.42}, {\"x\": 39, \"category\": \"B\", \"y\": -1.28}, {\"x\": 40, \"category\": \"B\", \"y\": -2.19}, {\"x\": 41, \"category\": \"B\", \"y\": -1.6}, {\"x\": 42, \"category\": \"B\", \"y\": -2.16}, {\"x\": 43, \"category\": \"B\", \"y\": -3.72}, {\"x\": 44, \"category\": \"B\", \"y\": -3.24}, {\"x\": 45, \"category\": \"B\", \"y\": -4.03}, {\"x\": 46, \"category\": \"B\", \"y\": -5.26}, {\"x\": 47, \"category\": \"B\", \"y\": -6.86}, {\"x\": 48, \"category\": \"B\", \"y\": -6.08}, {\"x\": 49, \"category\": \"B\", \"y\": -5.56}, {\"x\": 50, \"category\": \"B\", \"y\": -5.21}, {\"x\": 51, \"category\": \"B\", \"y\": -4.92}, {\"x\": 52, \"category\": \"B\", \"y\": -4.45}, {\"x\": 53, \"category\": \"B\", \"y\": -5.42}, {\"x\": 54, \"category\": \"B\", \"y\": -6.24}, {\"x\": 55, \"category\": \"B\", \"y\": -5.42}, {\"x\": 56, \"category\": \"B\", \"y\": -6.17}, {\"x\": 57, \"category\": \"B\", \"y\": -6.25}, {\"x\": 58, \"category\": \"B\", \"y\": -5.42}, {\"x\": 59, \"category\": \"B\", \"y\": -5.69}, {\"x\": 60, \"category\": \"B\", \"y\": -6.55}, {\"x\": 61, \"category\": \"B\", \"y\": -6.77}, {\"x\": 62, \"category\": \"B\", \"y\": -6.84}, {\"x\": 63, \"category\": \"B\", \"y\": -7.29}, {\"x\": 64, \"category\": \"B\", \"y\": -8.53}, {\"x\": 65, \"category\": \"B\", \"y\": -9.42}, {\"x\": 66, \"category\": \"B\", \"y\": -10.56}, {\"x\": 67, \"category\": \"B\", \"y\": -9.48}, {\"x\": 68, \"category\": \"B\", \"y\": -10.42}, {\"x\": 69, \"category\": \"B\", \"y\": -9.9}, {\"x\": 70, \"category\": \"B\", \"y\": -8.76}, {\"x\": 71, \"category\": \"B\", \"y\": -9.08}, {\"x\": 72, \"category\": \"B\", \"y\": -9.32}, {\"x\": 73, \"category\": \"B\", \"y\": -7.0}, {\"x\": 74, \"category\": \"B\", \"y\": -8.61}, {\"x\": 75, \"category\": \"B\", \"y\": -8.55}, {\"x\": 76, \"category\": \"B\", \"y\": -7.87}, {\"x\": 77, \"category\": \"B\", \"y\": -7.83}, {\"x\": 78, \"category\": \"B\", \"y\": -7.19}, {\"x\": 79, \"category\": \"B\", \"y\": -7.85}, {\"x\": 80, \"category\": \"B\", \"y\": -7.97}, {\"x\": 81, \"category\": \"B\", \"y\": -9.17}, {\"x\": 82, \"category\": \"B\", \"y\": -9.82}, {\"x\": 83, \"category\": \"B\", \"y\": -11.08}, {\"x\": 84, \"category\": \"B\", \"y\": -10.05}, {\"x\": 85, \"category\": \"B\", \"y\": -8.78}, {\"x\": 86, \"category\": \"B\", \"y\": -8.01}, {\"x\": 87, \"category\": \"B\", \"y\": -11.25}, {\"x\": 88, \"category\": \"B\", \"y\": -12.5}, {\"x\": 89, \"category\": \"B\", \"y\": -12.94}, {\"x\": 90, \"category\": \"B\", \"y\": -14.37}, {\"x\": 91, \"category\": \"B\", \"y\": -15.35}, {\"x\": 92, \"category\": \"B\", \"y\": -15.96}, {\"x\": 93, \"category\": \"B\", \"y\": -15.84}, {\"x\": 94, \"category\": \"B\", \"y\": -17.08}, {\"x\": 95, \"category\": \"B\", \"y\": -17.23}, {\"x\": 96, \"category\": \"B\", \"y\": -17.85}, {\"x\": 97, \"category\": \"B\", \"y\": -18.44}, {\"x\": 98, \"category\": \"B\", \"y\": -19.14}, {\"x\": 99, \"category\": \"B\", \"y\": -18.32}, {\"x\": 0, \"category\": \"C\", \"y\": 0.65}, {\"x\": 1, \"category\": \"C\", \"y\": 0.41}, {\"x\": 2, \"category\": \"C\", \"y\": -0.06}, {\"x\": 3, \"category\": \"C\", \"y\": -0.52}, {\"x\": 4, \"category\": \"C\", \"y\": -2.25}, {\"x\": 5, \"category\": \"C\", \"y\": -1.93}, {\"x\": 6, \"category\": \"C\", \"y\": -0.47}, {\"x\": 7, \"category\": \"C\", \"y\": -1.89}, {\"x\": 8, \"category\": \"C\", \"y\": -3.04}, {\"x\": 9, \"category\": \"C\", \"y\": -3.33}, {\"x\": 10, \"category\": \"C\", \"y\": -3.35}, {\"x\": 11, \"category\": \"C\", \"y\": -4.57}, {\"x\": 12, \"category\": \"C\", \"y\": -5.9}, {\"x\": 13, \"category\": \"C\", \"y\": -5.73}, {\"x\": 14, \"category\": \"C\", \"y\": -7.2}, {\"x\": 15, \"category\": \"C\", \"y\": -6.15}, {\"x\": 16, \"category\": \"C\", \"y\": -5.82}, {\"x\": 17, \"category\": \"C\", \"y\": -5.21}, {\"x\": 18, \"category\": \"C\", \"y\": -6.05}, {\"x\": 19, \"category\": \"C\", \"y\": -5.07}, {\"x\": 20, \"category\": \"C\", \"y\": -6.18}, {\"x\": 21, \"category\": \"C\", \"y\": -4.82}, {\"x\": 22, \"category\": \"C\", \"y\": -4.46}, {\"x\": 23, \"category\": \"C\", \"y\": -2.93}, {\"x\": 24, \"category\": \"C\", \"y\": -5.54}, {\"x\": 25, \"category\": \"C\", \"y\": -5.84}, {\"x\": 26, \"category\": \"C\", \"y\": -6.06}, {\"x\": 27, \"category\": \"C\", \"y\": -6.58}, {\"x\": 28, \"category\": \"C\", \"y\": -5.67}, {\"x\": 29, \"category\": \"C\", \"y\": -5.15}, {\"x\": 30, \"category\": \"C\", \"y\": -5.86}, {\"x\": 31, \"category\": \"C\", \"y\": -7.32}, {\"x\": 32, \"category\": \"C\", \"y\": -7.31}, {\"x\": 33, \"category\": \"C\", \"y\": -7.73}, {\"x\": 34, \"category\": \"C\", \"y\": -7.9}, {\"x\": 35, \"category\": \"C\", \"y\": -7.72}, {\"x\": 36, \"category\": \"C\", \"y\": -9.64}, {\"x\": 37, \"category\": \"C\", \"y\": -7.18}, {\"x\": 38, \"category\": \"C\", \"y\": -7.21}, {\"x\": 39, \"category\": \"C\", \"y\": -6.46}, {\"x\": 40, \"category\": \"C\", \"y\": -5.06}, {\"x\": 41, \"category\": \"C\", \"y\": -2.87}, {\"x\": 42, \"category\": \"C\", \"y\": -2.77}, {\"x\": 43, \"category\": \"C\", \"y\": -2.7}, {\"x\": 44, \"category\": \"C\", \"y\": -3.62}, {\"x\": 45, \"category\": \"C\", \"y\": -3.94}, {\"x\": 46, \"category\": \"C\", \"y\": -3.71}, {\"x\": 47, \"category\": \"C\", \"y\": -3.53}, {\"x\": 48, \"category\": \"C\", \"y\": -4.76}, {\"x\": 49, \"category\": \"C\", \"y\": -4.47}, {\"x\": 50, \"category\": \"C\", \"y\": -5.15}, {\"x\": 51, \"category\": \"C\", \"y\": -5.86}, {\"x\": 52, \"category\": \"C\", \"y\": -7.05}, {\"x\": 53, \"category\": \"C\", \"y\": -6.27}, {\"x\": 54, \"category\": \"C\", \"y\": -5.3}, {\"x\": 55, \"category\": \"C\", \"y\": -3.41}, {\"x\": 56, \"category\": \"C\", \"y\": -4.29}, {\"x\": 57, \"category\": \"C\", \"y\": -3.95}, {\"x\": 58, \"category\": \"C\", \"y\": -3.94}, {\"x\": 59, \"category\": \"C\", \"y\": -1.22}, {\"x\": 60, \"category\": \"C\", \"y\": -2.29}, {\"x\": 61, \"category\": \"C\", \"y\": -1.58}, {\"x\": 62, \"category\": \"C\", \"y\": -2.42}, {\"x\": 63, \"category\": \"C\", \"y\": -1.57}, {\"x\": 64, \"category\": \"C\", \"y\": -1.39}, {\"x\": 65, \"category\": \"C\", \"y\": -1.24}, {\"x\": 66, \"category\": \"C\", \"y\": -0.88}, {\"x\": 67, \"category\": \"C\", \"y\": 0.17}, {\"x\": 68, \"category\": \"C\", \"y\": 0.69}, {\"x\": 69, \"category\": \"C\", \"y\": 4.54}, {\"x\": 70, \"category\": \"C\", \"y\": 5.49}, {\"x\": 71, \"category\": \"C\", \"y\": 6.25}, {\"x\": 72, \"category\": \"C\", \"y\": 5.77}, {\"x\": 73, \"category\": \"C\", \"y\": 3.9}, {\"x\": 74, \"category\": \"C\", \"y\": 3.43}, {\"x\": 75, \"category\": \"C\", \"y\": 2.35}, {\"x\": 76, \"category\": \"C\", \"y\": 1.62}, {\"x\": 77, \"category\": \"C\", \"y\": 0.97}, {\"x\": 78, \"category\": \"C\", \"y\": -1.06}, {\"x\": 79, \"category\": \"C\", \"y\": -0.21}, {\"x\": 80, \"category\": \"C\", \"y\": 0.3}, {\"x\": 81, \"category\": \"C\", \"y\": -0.04}, {\"x\": 82, \"category\": \"C\", \"y\": 1.73}, {\"x\": 83, \"category\": \"C\", \"y\": 2.65}, {\"x\": 84, \"category\": \"C\", \"y\": 1.13}, {\"x\": 85, \"category\": \"C\", \"y\": 0.42}, {\"x\": 86, \"category\": \"C\", \"y\": -0.51}, {\"x\": 87, \"category\": \"C\", \"y\": -1.53}, {\"x\": 88, \"category\": \"C\", \"y\": 0.1}, {\"x\": 89, \"category\": \"C\", \"y\": 0.23}, {\"x\": 90, \"category\": \"C\", \"y\": 1.4}, {\"x\": 91, \"category\": \"C\", \"y\": 1.86}, {\"x\": 92, \"category\": \"C\", \"y\": 1.93}, {\"x\": 93, \"category\": \"C\", \"y\": 2.59}, {\"x\": 94, \"category\": \"C\", \"y\": 4.72}, {\"x\": 95, \"category\": \"C\", \"y\": 5.31}, {\"x\": 96, \"category\": \"C\", \"y\": 5.1}, {\"x\": 97, \"category\": \"C\", \"y\": 5.95}, {\"x\": 98, \"category\": \"C\", \"y\": 6.85}, {\"x\": 99, \"category\": \"C\", \"y\": 7.48}]}}; var opt = { \"mode\": \"vega-lite\", \"renderer\": \"canvas\", \"actions\": {\"editor\": true, \"source\": true, \"export\": true} }; vegaEmbed(\"#pheasant-altair-2\", spec, opt).catch(console.err); });","title":"Images"},{"location":"user-guide/images/#2-image","text":"In this section, we study how to embed images created by Matplotlib , Bokeh , and Altair libraries.","title":"2 Image"},{"location":"user-guide/images/#21-matplotlib","text":"First, figsize of figure is set to [2, 1.6] to show small figures for saving space. import matplotlib import matplotlib.pyplot as plt matplotlib.rcParams['figure.figsize'] = [2, 1.6] [1] 2020-05-19 14:00:46 ( 4.00ms ) python3 ( 634ms ) A call of plt.plot generates a standard plain text output (a list of Line object in this example) and a PNG image as display data: plt.plot([1, 2, 4], marker='o') [2] 2020-05-19 14:00:46 ( 63.0ms ) python3 ( 697ms ) [<matplotlib.lines.Line2D at 0x1f95e9773c8>] If you want to hide the input source and the plain text output, you can use a inline option to show just the display data such as an image or HTML: ```python inline plt.plot([4, 2, 3], marker='o') ``` \"Inline code\" is useful to display a plot in shorthand notation. {{plt.plot([1, 2, 4])}} generates: Note that the plain text output ( [<matplotlib.lines...] ) does not displayed if the inline code generates display data.","title":"2.1 Matplotlib"},{"location":"user-guide/images/#22-bokeh","text":"You can embed Bokeh 's plots into MkDocs HTML documents. Following User Guide \"Embedding Plots and Apps\" from the official Bokeh documents, Pheasant automatically adds extra stylesheet and javascript in HTML source. You don't need to configure extra_css and extra_javascript in your mkdocs.yml manually. In order to embed plots in your document, bokeh.embed.components function can be used. This function returns <script> and <div> tags in HTML format. For example: from bokeh.plotting import figure from bokeh.embed import components plot = figure(plot_width=250, plot_height=250) plot.circle([1, 2, 3, 4, 5], [1, 3, 3, 2, 4], size=10) script, div = components(plot) print('[script]:', script[:140].strip(), '...') print('[div]:', div[:40].strip(), '...') [5] 2020-05-19 14:00:46 ( 22.0ms ) python3 ( 844ms ) [script]: <script type=\"text/javascript\"> (function() { var fn = function() { Bokeh.safely(function() { (func ... [div]: <div class=\"bk-root\" id=\"31049df1-86d3- ... Pheasant uses this functionality inside automatically. You can get a Bokeh plot just write {{plot}} : (function() { var fn = function() { Bokeh.safely(function() { (function(root) { function embed_document(root) { var docs_json = '{&quot;a785fe22-2c17-4bd0-b085-4c96f4f24738&quot;:{&quot;roots&quot;:{&quot;references&quot;:[{&quot;attributes&quot;:{&quot;fill_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;line_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;size&quot;:{&quot;units&quot;:&quot;screen&quot;,&quot;value&quot;:10},&quot;x&quot;:{&quot;field&quot;:&quot;x&quot;},&quot;y&quot;:{&quot;field&quot;:&quot;y&quot;}},&quot;id&quot;:&quot;1033&quot;,&quot;type&quot;:&quot;Circle&quot;},{&quot;attributes&quot;:{&quot;formatter&quot;:{&quot;id&quot;:&quot;1039&quot;},&quot;ticker&quot;:{&quot;id&quot;:&quot;1011&quot;}},&quot;id&quot;:&quot;1010&quot;,&quot;type&quot;:&quot;LinearAxis&quot;},{&quot;attributes&quot;:{&quot;below&quot;:[{&quot;id&quot;:&quot;1010&quot;}],&quot;center&quot;:[{&quot;id&quot;:&quot;1013&quot;},{&quot;id&quot;:&quot;1017&quot;}],&quot;left&quot;:[{&quot;id&quot;:&quot;1014&quot;}],&quot;plot_height&quot;:250,&quot;plot_width&quot;:250,&quot;renderers&quot;:[{&quot;id&quot;:&quot;1035&quot;}],&quot;title&quot;:{&quot;id&quot;:&quot;1037&quot;},&quot;toolbar&quot;:{&quot;id&quot;:&quot;1025&quot;},&quot;x_range&quot;:{&quot;id&quot;:&quot;1002&quot;},&quot;x_scale&quot;:{&quot;id&quot;:&quot;1006&quot;},&quot;y_range&quot;:{&quot;id&quot;:&quot;1004&quot;},&quot;y_scale&quot;:{&quot;id&quot;:&quot;1008&quot;}},&quot;id&quot;:&quot;1001&quot;,&quot;subtype&quot;:&quot;Figure&quot;,&quot;type&quot;:&quot;Plot&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1018&quot;,&quot;type&quot;:&quot;PanTool&quot;},{&quot;attributes&quot;:{&quot;overlay&quot;:{&quot;id&quot;:&quot;1024&quot;}},&quot;id&quot;:&quot;1020&quot;,&quot;type&quot;:&quot;BoxZoomTool&quot;},{&quot;attributes&quot;:{&quot;axis&quot;:{&quot;id&quot;:&quot;1010&quot;},&quot;ticker&quot;:null},&quot;id&quot;:&quot;1013&quot;,&quot;type&quot;:&quot;Grid&quot;},{&quot;attributes&quot;:{&quot;fill_alpha&quot;:{&quot;value&quot;:0.1},&quot;fill_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;line_alpha&quot;:{&quot;value&quot;:0.1},&quot;line_color&quot;:{&quot;value&quot;:&quot;#1f77b4&quot;},&quot;size&quot;:{&quot;units&quot;:&quot;screen&quot;,&quot;value&quot;:10},&quot;x&quot;:{&quot;field&quot;:&quot;x&quot;},&quot;y&quot;:{&quot;field&quot;:&quot;y&quot;}},&quot;id&quot;:&quot;1034&quot;,&quot;type&quot;:&quot;Circle&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1021&quot;,&quot;type&quot;:&quot;SaveTool&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1015&quot;,&quot;type&quot;:&quot;BasicTicker&quot;},{&quot;attributes&quot;:{&quot;formatter&quot;:{&quot;id&quot;:&quot;1041&quot;},&quot;ticker&quot;:{&quot;id&quot;:&quot;1015&quot;}},&quot;id&quot;:&quot;1014&quot;,&quot;type&quot;:&quot;LinearAxis&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1023&quot;,&quot;type&quot;:&quot;HelpTool&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1019&quot;,&quot;type&quot;:&quot;WheelZoomTool&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1022&quot;,&quot;type&quot;:&quot;ResetTool&quot;},{&quot;attributes&quot;:{&quot;source&quot;:{&quot;id&quot;:&quot;1032&quot;}},&quot;id&quot;:&quot;1036&quot;,&quot;type&quot;:&quot;CDSView&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1039&quot;,&quot;type&quot;:&quot;BasicTickFormatter&quot;},{&quot;attributes&quot;:{&quot;bottom_units&quot;:&quot;screen&quot;,&quot;fill_alpha&quot;:0.5,&quot;fill_color&quot;:&quot;lightgrey&quot;,&quot;left_units&quot;:&quot;screen&quot;,&quot;level&quot;:&quot;overlay&quot;,&quot;line_alpha&quot;:1.0,&quot;line_color&quot;:&quot;black&quot;,&quot;line_dash&quot;:[4,4],&quot;line_width&quot;:2,&quot;render_mode&quot;:&quot;css&quot;,&quot;right_units&quot;:&quot;screen&quot;,&quot;top_units&quot;:&quot;screen&quot;},&quot;id&quot;:&quot;1024&quot;,&quot;type&quot;:&quot;BoxAnnotation&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1002&quot;,&quot;type&quot;:&quot;DataRange1d&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1044&quot;,&quot;type&quot;:&quot;UnionRenderers&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1004&quot;,&quot;type&quot;:&quot;DataRange1d&quot;},{&quot;attributes&quot;:{&quot;axis&quot;:{&quot;id&quot;:&quot;1014&quot;},&quot;dimension&quot;:1,&quot;ticker&quot;:null},&quot;id&quot;:&quot;1017&quot;,&quot;type&quot;:&quot;Grid&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1006&quot;,&quot;type&quot;:&quot;LinearScale&quot;},{&quot;attributes&quot;:{&quot;active_drag&quot;:&quot;auto&quot;,&quot;active_inspect&quot;:&quot;auto&quot;,&quot;active_multi&quot;:null,&quot;active_scroll&quot;:&quot;auto&quot;,&quot;active_tap&quot;:&quot;auto&quot;,&quot;tools&quot;:[{&quot;id&quot;:&quot;1018&quot;},{&quot;id&quot;:&quot;1019&quot;},{&quot;id&quot;:&quot;1020&quot;},{&quot;id&quot;:&quot;1021&quot;},{&quot;id&quot;:&quot;1022&quot;},{&quot;id&quot;:&quot;1023&quot;}]},&quot;id&quot;:&quot;1025&quot;,&quot;type&quot;:&quot;Toolbar&quot;},{&quot;attributes&quot;:{&quot;data&quot;:{&quot;x&quot;:[1,2,3,4,5],&quot;y&quot;:[1,3,3,2,4]},&quot;selected&quot;:{&quot;id&quot;:&quot;1043&quot;},&quot;selection_policy&quot;:{&quot;id&quot;:&quot;1044&quot;}},&quot;id&quot;:&quot;1032&quot;,&quot;type&quot;:&quot;ColumnDataSource&quot;},{&quot;attributes&quot;:{&quot;data_source&quot;:{&quot;id&quot;:&quot;1032&quot;},&quot;glyph&quot;:{&quot;id&quot;:&quot;1033&quot;},&quot;hover_glyph&quot;:null,&quot;muted_glyph&quot;:null,&quot;nonselection_glyph&quot;:{&quot;id&quot;:&quot;1034&quot;},&quot;selection_glyph&quot;:null,&quot;view&quot;:{&quot;id&quot;:&quot;1036&quot;}},&quot;id&quot;:&quot;1035&quot;,&quot;type&quot;:&quot;GlyphRenderer&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1041&quot;,&quot;type&quot;:&quot;BasicTickFormatter&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1008&quot;,&quot;type&quot;:&quot;LinearScale&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1043&quot;,&quot;type&quot;:&quot;Selection&quot;},{&quot;attributes&quot;:{},&quot;id&quot;:&quot;1011&quot;,&quot;type&quot;:&quot;BasicTicker&quot;},{&quot;attributes&quot;:{&quot;text&quot;:&quot;&quot;},&quot;id&quot;:&quot;1037&quot;,&quot;type&quot;:&quot;Title&quot;}],&quot;root_ids&quot;:[&quot;1001&quot;]},&quot;title&quot;:&quot;Bokeh Application&quot;,&quot;version&quot;:&quot;2.0.2&quot;}}'; var render_items = [{\"docid\":\"a785fe22-2c17-4bd0-b085-4c96f4f24738\",\"root_ids\":[\"1001\"],\"roots\":{\"1001\":\"6dee2598-5b51-45fd-b281-0de4a0f43d34\"}}]; root.Bokeh.embed.embed_items(docs_json, render_items); } if (root.Bokeh !== undefined) { embed_document(root); } else { var attempts = 0; var timer = setInterval(function(root) { if (root.Bokeh !== undefined) { clearInterval(timer); embed_document(root); } else { attempts++; if (attempts > 100) { clearInterval(timer); console.log(\"Bokeh: ERROR: Unable to run BokehJS code because BokehJS library is missing\"); } } }, 10, root) } })(window); }); }; if (document.readyState != \"loading\") fn(); else document.addEventListener(\"DOMContentLoaded\", fn); })();","title":"2.2 Bokeh"},{"location":"user-guide/images/#23-altair","text":"From official Example Gallery","title":"2.3 Altair"},{"location":"user-guide/images/#simple-bar-chart","text":"import altair as alt import pandas as pd source = pd.DataFrame({ 'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'], 'b': [28, 55, 43, 91, 81, 53, 19, 87, 52] }) alt.Chart(source).mark_bar().encode(x='a', y='b') [7] 2020-05-19 14:00:46 ( 23.0ms ) python3 ( 878ms ) document.addEventListener(\"DOMContentLoaded\", function(event) { var spec = {\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"data\": {\"name\": \"data-c2a3e89ba9d5d1687d5e8c28d630a033\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"nominal\", \"field\": \"a\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"b\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-c2a3e89ba9d5d1687d5e8c28d630a033\": [{\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43}, {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53}, {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}]}}; var opt = { \"mode\": \"vega-lite\", \"renderer\": \"canvas\", \"actions\": {\"editor\": true, \"source\": true, \"export\": true} }; vegaEmbed(\"#pheasant-altair-1\", spec, opt).catch(console.err); });","title":"Simple Bar Chart"},{"location":"user-guide/images/#multi-line-tooltip","text":"import altair as alt import pandas as pd import numpy as np np.random.seed(42) source = pd.DataFrame(np.cumsum(np.random.randn(100, 3), 0).round(2), columns=['A', 'B', 'C'], index=pd.RangeIndex(100, name='x')) source = source.reset_index().melt('x', var_name='category', value_name='y') # Create a selection that chooses the nearest point & selects based on x-value nearest = alt.selection(type='single', nearest=True, on='mouseover', fields=['x'], empty='none') # The basic line line = alt.Chart().mark_line(interpolate='basis').encode( x='x:Q', y='y:Q', color='category:N' ) # Transparent selectors across the chart. This is what tells us # the x-value of the cursor selectors = alt.Chart().mark_point().encode( x='x:Q', opacity=alt.value(0), ).add_selection( nearest ) # Draw points on the line, and highlight based on selection points = line.mark_point().encode( opacity=alt.condition(nearest, alt.value(1), alt.value(0)) ) # Draw text labels near the points, and highlight based on selection text = line.mark_text(align='left', dx=5, dy=-5).encode( text=alt.condition(nearest, 'y:Q', alt.value(' ')) ) # Draw a rule at the location of the selection rules = alt.Chart().mark_rule(color='gray').encode( x='x:Q', ).transform_filter( nearest ) # Put the five layers into a chart and bind the data alt.layer(line, selectors, points, rules, text, data=source, width=400, height=300) [8] 2020-05-19 14:00:46 ( 69.0ms ) python3 ( 947ms ) document.addEventListener(\"DOMContentLoaded\", function(event) { var spec = {\"config\": {\"view\": {\"continuousWidth\": 400, \"continuousHeight\": 300}}, \"layer\": [{\"mark\": {\"type\": \"line\", \"interpolate\": \"basis\"}, \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"category\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"y\"}}}, {\"mark\": \"point\", \"encoding\": {\"opacity\": {\"value\": 0}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}}, \"selection\": {\"selector001\": {\"type\": \"single\", \"nearest\": true, \"on\": \"mouseover\", \"fields\": [\"x\"], \"empty\": \"none\"}}}, {\"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"category\"}, \"opacity\": {\"condition\": {\"value\": 1, \"selection\": \"selector001\"}, \"value\": 0}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"y\"}}}, {\"mark\": {\"type\": \"rule\", \"color\": \"gray\"}, \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"x\"}}, \"transform\": [{\"filter\": {\"selection\": \"selector001\"}}]}, {\"mark\": {\"type\": \"text\", \"align\": \"left\", \"dx\": 5, \"dy\": -5}, \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"category\"}, \"text\": {\"condition\": {\"type\": \"quantitative\", \"field\": \"y\", \"selection\": \"selector001\"}, \"value\": \" \"}, \"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"y\"}}}], \"data\": {\"name\": \"data-6721a5d73fc2eb4feb320b5cbb7cae62\"}, \"height\": 300, \"width\": 400, \"$schema\": \"https://vega.github.io/schema/vega-lite/v4.8.1.json\", \"datasets\": {\"data-6721a5d73fc2eb4feb320b5cbb7cae62\": [{\"x\": 0, \"category\": \"A\", \"y\": 0.5}, {\"x\": 1, \"category\": \"A\", \"y\": 2.02}, {\"x\": 2, \"category\": \"A\", \"y\": 3.6}, {\"x\": 3, \"category\": \"A\", \"y\": 4.14}, {\"x\": 4, \"category\": \"A\", \"y\": 4.38}, {\"x\": 5, \"category\": \"A\", \"y\": 3.82}, {\"x\": 6, \"category\": \"A\", \"y\": 2.91}, {\"x\": 7, \"category\": \"A\", \"y\": 2.69}, {\"x\": 8, \"category\": \"A\", \"y\": 2.14}, {\"x\": 9, \"category\": \"A\", \"y\": 2.52}, {\"x\": 10, \"category\": \"A\", \"y\": 1.92}, {\"x\": 11, \"category\": \"A\", \"y\": 0.86}, {\"x\": 12, \"category\": \"A\", \"y\": 1.07}, {\"x\": 13, \"category\": \"A\", \"y\": 1.27}, {\"x\": 14, \"category\": \"A\", \"y\": 1.15}, {\"x\": 15, \"category\": \"A\", \"y\": 0.43}, {\"x\": 16, \"category\": \"A\", \"y\": 0.77}, {\"x\": 17, \"category\": \"A\", \"y\": 0.39}, {\"x\": 18, \"category\": \"A\", \"y\": 1.42}, {\"x\": 19, \"category\": \"A\", \"y\": 1.11}, {\"x\": 20, \"category\": \"A\", \"y\": 0.63}, {\"x\": 21, \"category\": \"A\", \"y\": -0.57}, {\"x\": 22, \"category\": \"A\", \"y\": -0.64}, {\"x\": 23, \"category\": \"A\", \"y\": -1.28}, {\"x\": 24, \"category\": \"A\", \"y\": -1.32}, {\"x\": 25, \"category\": \"A\", \"y\": -0.5}, {\"x\": 26, \"category\": \"A\", \"y\": -0.4}, {\"x\": 27, \"category\": \"A\", \"y\": -0.05}, {\"x\": 28, \"category\": \"A\", \"y\": -0.86}, {\"x\": 29, \"category\": \"A\", \"y\": -0.53}, {\"x\": 30, \"category\": \"A\", \"y\": -0.43}, {\"x\": 31, \"category\": \"A\", \"y\": -0.76}, {\"x\": 32, \"category\": \"A\", \"y\": -0.46}, {\"x\": 33, \"category\": \"A\", \"y\": -0.7}, {\"x\": 34, \"category\": \"A\", \"y\": -1.04}, {\"x\": 35, \"category\": \"A\", \"y\": -0.64}, {\"x\": 36, \"category\": \"A\", \"y\": -0.38}, {\"x\": 37, \"category\": \"A\", \"y\": -0.4}, {\"x\": 38, \"category\": \"A\", \"y\": -0.6}, {\"x\": 39, \"category\": \"A\", \"y\": -1.77}, {\"x\": 40, \"category\": \"A\", \"y\": -0.97}, {\"x\": 41, \"category\": \"A\", \"y\": -2.38}, {\"x\": 42, \"category\": \"A\", \"y\": -3.37}, {\"x\": 43, \"category\": \"A\", \"y\": -3.87}, {\"x\": 44, \"category\": \"A\", \"y\": -4.93}, {\"x\": 45, \"category\": \"A\", \"y\": -3.38}, {\"x\": 46, \"category\": \"A\", \"y\": -2.57}, {\"x\": 47, \"category\": \"A\", \"y\": -1.26}, {\"x\": 48, \"category\": \"A\", \"y\": -1.0}, {\"x\": 49, \"category\": \"A\", \"y\": -2.32}, {\"x\": 50, \"category\": \"A\", \"y\": -2.07}, {\"x\": 51, \"category\": \"A\", \"y\": -1.84}, {\"x\": 52, \"category\": \"A\", \"y\": 0.03}, {\"x\": 53, \"category\": \"A\", \"y\": 0.68}, {\"x\": 54, \"category\": \"A\", \"y\": 1.84}, {\"x\": 55, \"category\": \"A\", \"y\": 2.25}, {\"x\": 56, \"category\": \"A\", \"y\": 2.01}, {\"x\": 57, \"category\": \"A\", \"y\": 1.19}, {\"x\": 58, \"category\": \"A\", \"y\": 1.47}, {\"x\": 59, \"category\": \"A\", \"y\": 2.92}, {\"x\": 60, \"category\": \"A\", \"y\": 3.55}, {\"x\": 61, \"category\": \"A\", \"y\": 4.03}, {\"x\": 62, \"category\": \"A\", \"y\": 4.5}, {\"x\": 63, \"category\": \"A\", \"y\": 2.99}, {\"x\": 64, \"category\": \"A\", \"y\": 3.2}, {\"x\": 65, \"category\": \"A\", \"y\": 3.59}, {\"x\": 66, \"category\": \"A\", \"y\": 3.65}, {\"x\": 67, \"category\": \"A\", \"y\": 4.21}, {\"x\": 68, \"category\": \"A\", \"y\": 2.83}, {\"x\": 69, \"category\": \"A\", \"y\": 3.34}, {\"x\": 70, \"category\": \"A\", \"y\": 3.92}, {\"x\": 71, \"category\": \"A\", \"y\": 4.57}, {\"x\": 72, \"category\": \"A\", \"y\": 3.79}, {\"x\": 73, \"category\": \"A\", \"y\": 3.88}, {\"x\": 74, \"category\": \"A\", \"y\": 4.56}, {\"x\": 75, \"category\": \"A\", \"y\": 5.65}, {\"x\": 76, \"category\": \"A\", \"y\": 4.94}, {\"x\": 77, \"category\": \"A\", \"y\": 5.15}, {\"x\": 78, \"category\": \"A\", \"y\": 7.3}, {\"x\": 79, \"category\": \"A\", \"y\": 7.48}, {\"x\": 80, \"category\": \"A\", \"y\": 6.69}, {\"x\": 81, \"category\": \"A\", \"y\": 7.56}, {\"x\": 82, \"category\": \"A\", \"y\": 7.08}, {\"x\": 83, \"category\": \"A\", \"y\": 7.49}, {\"x\": 84, \"category\": \"A\", \"y\": 9.61}, {\"x\": 85, \"category\": \"A\", \"y\": 9.12}, {\"x\": 86, \"category\": \"A\", \"y\": 9.57}, {\"x\": 87, \"category\": \"A\", \"y\": 9.51}, {\"x\": 88, \"category\": \"A\", \"y\": 9.26}, {\"x\": 89, \"category\": \"A\", \"y\": 7.83}, {\"x\": 90, \"category\": \"A\", \"y\": 9.27}, {\"x\": 91, \"category\": \"A\", \"y\": 9.28}, {\"x\": 92, \"category\": \"A\", \"y\": 9.48}, {\"x\": 93, \"category\": \"A\", \"y\": 9.09}, {\"x\": 94, \"category\": \"A\", \"y\": 10.68}, {\"x\": 95, \"category\": \"A\", \"y\": 8.72}, {\"x\": 96, \"category\": \"A\", \"y\": 9.01}, {\"x\": 97, \"category\": \"A\", \"y\": 8.51}, {\"x\": 98, \"category\": \"A\", \"y\": 8.87}, {\"x\": 99, \"category\": \"A\", \"y\": 9.18}, {\"x\": 0, \"category\": \"B\", \"y\": -0.14}, {\"x\": 1, \"category\": \"B\", \"y\": -0.37}, {\"x\": 2, \"category\": \"B\", \"y\": 0.4}, {\"x\": 3, \"category\": \"B\", \"y\": -0.07}, {\"x\": 4, \"category\": \"B\", \"y\": -1.98}, {\"x\": 5, \"category\": \"B\", \"y\": -2.99}, {\"x\": 6, \"category\": \"B\", \"y\": -4.41}, {\"x\": 7, \"category\": \"B\", \"y\": -4.34}, {\"x\": 8, \"category\": \"B\", \"y\": -4.23}, {\"x\": 9, \"category\": \"B\", \"y\": -4.83}, {\"x\": 10, \"category\": \"B\", \"y\": -2.98}, {\"x\": 11, \"category\": \"B\", \"y\": -2.15}, {\"x\": 12, \"category\": \"B\", \"y\": -4.11}, {\"x\": 13, \"category\": \"B\", \"y\": -3.38}, {\"x\": 14, \"category\": \"B\", \"y\": -3.68}, {\"x\": 15, \"category\": \"B\", \"y\": -4.14}, {\"x\": 16, \"category\": \"B\", \"y\": -5.9}, {\"x\": 17, \"category\": \"B\", \"y\": -6.58}, {\"x\": 18, \"category\": \"B\", \"y\": -5.65}, {\"x\": 19, \"category\": \"B\", \"y\": -5.31}, {\"x\": 20, \"category\": \"B\", \"y\": -5.5}, {\"x\": 21, \"category\": \"B\", \"y\": -4.69}, {\"x\": 22, \"category\": \"B\", \"y\": -3.68}, {\"x\": 23, \"category\": \"B\", \"y\": -3.32}, {\"x\": 24, \"category\": \"B\", \"y\": -1.76}, {\"x\": 25, \"category\": \"B\", \"y\": -1.67}, {\"x\": 26, \"category\": \"B\", \"y\": -3.66}, {\"x\": 27, \"category\": \"B\", \"y\": -2.18}, {\"x\": 28, \"category\": \"B\", \"y\": -2.68}, {\"x\": 29, \"category\": \"B\", \"y\": -3.21}, {\"x\": 30, \"category\": \"B\", \"y\": -2.24}, {\"x\": 31, \"category\": \"B\", \"y\": -2.64}, {\"x\": 32, \"category\": \"B\", \"y\": -2.37}, {\"x\": 33, \"category\": \"B\", \"y\": -3.79}, {\"x\": 34, \"category\": \"B\", \"y\": -4.59}, {\"x\": 35, \"category\": \"B\", \"y\": -2.71}, {\"x\": 36, \"category\": \"B\", \"y\": -2.78}, {\"x\": 37, \"category\": \"B\", \"y\": -2.72}, {\"x\": 38, \"category\": \"B\", \"y\": -2.42}, {\"x\": 39, \"category\": \"B\", \"y\": -1.28}, {\"x\": 40, \"category\": \"B\", \"y\": -2.19}, {\"x\": 41, \"category\": \"B\", \"y\": -1.6}, {\"x\": 42, \"category\": \"B\", \"y\": -2.16}, {\"x\": 43, \"category\": \"B\", \"y\": -3.72}, {\"x\": 44, \"category\": \"B\", \"y\": -3.24}, {\"x\": 45, \"category\": \"B\", \"y\": -4.03}, {\"x\": 46, \"category\": \"B\", \"y\": -5.26}, {\"x\": 47, \"category\": \"B\", \"y\": -6.86}, {\"x\": 48, \"category\": \"B\", \"y\": -6.08}, {\"x\": 49, \"category\": \"B\", \"y\": -5.56}, {\"x\": 50, \"category\": \"B\", \"y\": -5.21}, {\"x\": 51, \"category\": \"B\", \"y\": -4.92}, {\"x\": 52, \"category\": \"B\", \"y\": -4.45}, {\"x\": 53, \"category\": \"B\", \"y\": -5.42}, {\"x\": 54, \"category\": \"B\", \"y\": -6.24}, {\"x\": 55, \"category\": \"B\", \"y\": -5.42}, {\"x\": 56, \"category\": \"B\", \"y\": -6.17}, {\"x\": 57, \"category\": \"B\", \"y\": -6.25}, {\"x\": 58, \"category\": \"B\", \"y\": -5.42}, {\"x\": 59, \"category\": \"B\", \"y\": -5.69}, {\"x\": 60, \"category\": \"B\", \"y\": -6.55}, {\"x\": 61, \"category\": \"B\", \"y\": -6.77}, {\"x\": 62, \"category\": \"B\", \"y\": -6.84}, {\"x\": 63, \"category\": \"B\", \"y\": -7.29}, {\"x\": 64, \"category\": \"B\", \"y\": -8.53}, {\"x\": 65, \"category\": \"B\", \"y\": -9.42}, {\"x\": 66, \"category\": \"B\", \"y\": -10.56}, {\"x\": 67, \"category\": \"B\", \"y\": -9.48}, {\"x\": 68, \"category\": \"B\", \"y\": -10.42}, {\"x\": 69, \"category\": \"B\", \"y\": -9.9}, {\"x\": 70, \"category\": \"B\", \"y\": -8.76}, {\"x\": 71, \"category\": \"B\", \"y\": -9.08}, {\"x\": 72, \"category\": \"B\", \"y\": -9.32}, {\"x\": 73, \"category\": \"B\", \"y\": -7.0}, {\"x\": 74, \"category\": \"B\", \"y\": -8.61}, {\"x\": 75, \"category\": \"B\", \"y\": -8.55}, {\"x\": 76, \"category\": \"B\", \"y\": -7.87}, {\"x\": 77, \"category\": \"B\", \"y\": -7.83}, {\"x\": 78, \"category\": \"B\", \"y\": -7.19}, {\"x\": 79, \"category\": \"B\", \"y\": -7.85}, {\"x\": 80, \"category\": \"B\", \"y\": -7.97}, {\"x\": 81, \"category\": \"B\", \"y\": -9.17}, {\"x\": 82, \"category\": \"B\", \"y\": -9.82}, {\"x\": 83, \"category\": \"B\", \"y\": -11.08}, {\"x\": 84, \"category\": \"B\", \"y\": -10.05}, {\"x\": 85, \"category\": \"B\", \"y\": -8.78}, {\"x\": 86, \"category\": \"B\", \"y\": -8.01}, {\"x\": 87, \"category\": \"B\", \"y\": -11.25}, {\"x\": 88, \"category\": \"B\", \"y\": -12.5}, {\"x\": 89, \"category\": \"B\", \"y\": -12.94}, {\"x\": 90, \"category\": \"B\", \"y\": -14.37}, {\"x\": 91, \"category\": \"B\", \"y\": -15.35}, {\"x\": 92, \"category\": \"B\", \"y\": -15.96}, {\"x\": 93, \"category\": \"B\", \"y\": -15.84}, {\"x\": 94, \"category\": \"B\", \"y\": -17.08}, {\"x\": 95, \"category\": \"B\", \"y\": -17.23}, {\"x\": 96, \"category\": \"B\", \"y\": -17.85}, {\"x\": 97, \"category\": \"B\", \"y\": -18.44}, {\"x\": 98, \"category\": \"B\", \"y\": -19.14}, {\"x\": 99, \"category\": \"B\", \"y\": -18.32}, {\"x\": 0, \"category\": \"C\", \"y\": 0.65}, {\"x\": 1, \"category\": \"C\", \"y\": 0.41}, {\"x\": 2, \"category\": \"C\", \"y\": -0.06}, {\"x\": 3, \"category\": \"C\", \"y\": -0.52}, {\"x\": 4, \"category\": \"C\", \"y\": -2.25}, {\"x\": 5, \"category\": \"C\", \"y\": -1.93}, {\"x\": 6, \"category\": \"C\", \"y\": -0.47}, {\"x\": 7, \"category\": \"C\", \"y\": -1.89}, {\"x\": 8, \"category\": \"C\", \"y\": -3.04}, {\"x\": 9, \"category\": \"C\", \"y\": -3.33}, {\"x\": 10, \"category\": \"C\", \"y\": -3.35}, {\"x\": 11, \"category\": \"C\", \"y\": -4.57}, {\"x\": 12, \"category\": \"C\", \"y\": -5.9}, {\"x\": 13, \"category\": \"C\", \"y\": -5.73}, {\"x\": 14, \"category\": \"C\", \"y\": -7.2}, {\"x\": 15, \"category\": \"C\", \"y\": -6.15}, {\"x\": 16, \"category\": \"C\", \"y\": -5.82}, {\"x\": 17, \"category\": \"C\", \"y\": -5.21}, {\"x\": 18, \"category\": \"C\", \"y\": -6.05}, {\"x\": 19, \"category\": \"C\", \"y\": -5.07}, {\"x\": 20, \"category\": \"C\", \"y\": -6.18}, {\"x\": 21, \"category\": \"C\", \"y\": -4.82}, {\"x\": 22, \"category\": \"C\", \"y\": -4.46}, {\"x\": 23, \"category\": \"C\", \"y\": -2.93}, {\"x\": 24, \"category\": \"C\", \"y\": -5.54}, {\"x\": 25, \"category\": \"C\", \"y\": -5.84}, {\"x\": 26, \"category\": \"C\", \"y\": -6.06}, {\"x\": 27, \"category\": \"C\", \"y\": -6.58}, {\"x\": 28, \"category\": \"C\", \"y\": -5.67}, {\"x\": 29, \"category\": \"C\", \"y\": -5.15}, {\"x\": 30, \"category\": \"C\", \"y\": -5.86}, {\"x\": 31, \"category\": \"C\", \"y\": -7.32}, {\"x\": 32, \"category\": \"C\", \"y\": -7.31}, {\"x\": 33, \"category\": \"C\", \"y\": -7.73}, {\"x\": 34, \"category\": \"C\", \"y\": -7.9}, {\"x\": 35, \"category\": \"C\", \"y\": -7.72}, {\"x\": 36, \"category\": \"C\", \"y\": -9.64}, {\"x\": 37, \"category\": \"C\", \"y\": -7.18}, {\"x\": 38, \"category\": \"C\", \"y\": -7.21}, {\"x\": 39, \"category\": \"C\", \"y\": -6.46}, {\"x\": 40, \"category\": \"C\", \"y\": -5.06}, {\"x\": 41, \"category\": \"C\", \"y\": -2.87}, {\"x\": 42, \"category\": \"C\", \"y\": -2.77}, {\"x\": 43, \"category\": \"C\", \"y\": -2.7}, {\"x\": 44, \"category\": \"C\", \"y\": -3.62}, {\"x\": 45, \"category\": \"C\", \"y\": -3.94}, {\"x\": 46, \"category\": \"C\", \"y\": -3.71}, {\"x\": 47, \"category\": \"C\", \"y\": -3.53}, {\"x\": 48, \"category\": \"C\", \"y\": -4.76}, {\"x\": 49, \"category\": \"C\", \"y\": -4.47}, {\"x\": 50, \"category\": \"C\", \"y\": -5.15}, {\"x\": 51, \"category\": \"C\", \"y\": -5.86}, {\"x\": 52, \"category\": \"C\", \"y\": -7.05}, {\"x\": 53, \"category\": \"C\", \"y\": -6.27}, {\"x\": 54, \"category\": \"C\", \"y\": -5.3}, {\"x\": 55, \"category\": \"C\", \"y\": -3.41}, {\"x\": 56, \"category\": \"C\", \"y\": -4.29}, {\"x\": 57, \"category\": \"C\", \"y\": -3.95}, {\"x\": 58, \"category\": \"C\", \"y\": -3.94}, {\"x\": 59, \"category\": \"C\", \"y\": -1.22}, {\"x\": 60, \"category\": \"C\", \"y\": -2.29}, {\"x\": 61, \"category\": \"C\", \"y\": -1.58}, {\"x\": 62, \"category\": \"C\", \"y\": -2.42}, {\"x\": 63, \"category\": \"C\", \"y\": -1.57}, {\"x\": 64, \"category\": \"C\", \"y\": -1.39}, {\"x\": 65, \"category\": \"C\", \"y\": -1.24}, {\"x\": 66, \"category\": \"C\", \"y\": -0.88}, {\"x\": 67, \"category\": \"C\", \"y\": 0.17}, {\"x\": 68, \"category\": \"C\", \"y\": 0.69}, {\"x\": 69, \"category\": \"C\", \"y\": 4.54}, {\"x\": 70, \"category\": \"C\", \"y\": 5.49}, {\"x\": 71, \"category\": \"C\", \"y\": 6.25}, {\"x\": 72, \"category\": \"C\", \"y\": 5.77}, {\"x\": 73, \"category\": \"C\", \"y\": 3.9}, {\"x\": 74, \"category\": \"C\", \"y\": 3.43}, {\"x\": 75, \"category\": \"C\", \"y\": 2.35}, {\"x\": 76, \"category\": \"C\", \"y\": 1.62}, {\"x\": 77, \"category\": \"C\", \"y\": 0.97}, {\"x\": 78, \"category\": \"C\", \"y\": -1.06}, {\"x\": 79, \"category\": \"C\", \"y\": -0.21}, {\"x\": 80, \"category\": \"C\", \"y\": 0.3}, {\"x\": 81, \"category\": \"C\", \"y\": -0.04}, {\"x\": 82, \"category\": \"C\", \"y\": 1.73}, {\"x\": 83, \"category\": \"C\", \"y\": 2.65}, {\"x\": 84, \"category\": \"C\", \"y\": 1.13}, {\"x\": 85, \"category\": \"C\", \"y\": 0.42}, {\"x\": 86, \"category\": \"C\", \"y\": -0.51}, {\"x\": 87, \"category\": \"C\", \"y\": -1.53}, {\"x\": 88, \"category\": \"C\", \"y\": 0.1}, {\"x\": 89, \"category\": \"C\", \"y\": 0.23}, {\"x\": 90, \"category\": \"C\", \"y\": 1.4}, {\"x\": 91, \"category\": \"C\", \"y\": 1.86}, {\"x\": 92, \"category\": \"C\", \"y\": 1.93}, {\"x\": 93, \"category\": \"C\", \"y\": 2.59}, {\"x\": 94, \"category\": \"C\", \"y\": 4.72}, {\"x\": 95, \"category\": \"C\", \"y\": 5.31}, {\"x\": 96, \"category\": \"C\", \"y\": 5.1}, {\"x\": 97, \"category\": \"C\", \"y\": 5.95}, {\"x\": 98, \"category\": \"C\", \"y\": 6.85}, {\"x\": 99, \"category\": \"C\", \"y\": 7.48}]}}; var opt = { \"mode\": \"vega-lite\", \"renderer\": \"canvas\", \"actions\": {\"editor\": true, \"source\": true, \"export\": true} }; vegaEmbed(\"#pheasant-altair-2\", spec, opt).catch(console.err); });","title":"Multi-Line Tooltip"},{"location":"user-guide/kernel/","text":"7 Kernel 7.1 IJavascript $ conda install jupyter $ conda install nodejs==8.9.3 $ npm install -g ijavascript $ ijsinstall ```javascript console.log(\"Hello, IJavascript!\") ``` 7.2 IJulia julia> using Pkg julia> Pkg.add(\"IJulia\") ```julia println(\"Hello, IJulia!\") ``` 7.3 Kernel list Mapping a language to kernel names can be obtained as a dictionary by kernels.kernel_names property: from pheasant.renderers.jupyter.kernel import kernels kernels.kernel_names [1] 2020-05-19 14:00:47 ( 6.00ms ) python3 ( 1.07s ) {'python': ['python3']}","title":"Kernel"},{"location":"user-guide/kernel/#7-kernel","text":"","title":"7 Kernel"},{"location":"user-guide/kernel/#71-ijavascript","text":"$ conda install jupyter $ conda install nodejs==8.9.3 $ npm install -g ijavascript $ ijsinstall ```javascript console.log(\"Hello, IJavascript!\") ```","title":"7.1 IJavascript"},{"location":"user-guide/kernel/#72-ijulia","text":"julia> using Pkg julia> Pkg.add(\"IJulia\") ```julia println(\"Hello, IJulia!\") ```","title":"7.2 IJulia"},{"location":"user-guide/kernel/#73-kernel-list","text":"Mapping a language to kernel names can be obtained as a dictionary by kernels.kernel_names property: from pheasant.renderers.jupyter.kernel import kernels kernels.kernel_names [1] 2020-05-19 14:00:47 ( 6.00ms ) python3 ( 1.07s ) {'python': ['python3']}","title":"7.3 Kernel list"},{"location":"user-guide/script/","text":"5 Standalone Script Using Atom's Hydrogen package, you can execute any Python script codes within a fenced code block in a Markdown source. So you can edit your code verifying its execution results. But unfortunately (as long as I know), the entire Markdown source cannot be executed all at once as a standalone script and cannot be ran by Python interpreter. Pheasant connects between a pure Python script and a Markdown source. Actually, this page is written by a pure Python code. 5.1 How to A basic idea is that Markdown cells and Python code cells generally appear alternately. We can write a Markdown cell with a successive comment lines. In order to be recognized as a Markdown cell, # must be at the begining of lines. But we can insert a blank line to make a paragraph. Normal Python code is treated as a code cell as you expect. def add(x: int, y: int) -> int: \"\"\"Add `x` and `y`.\"\"\" return x + y def sub(x: int, y: int) -> int: \"\"\"Substract `y` from `x`.\"\"\" return x - y [1] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 1.03s ) When a comment starts at the begining of line after a code block, it divides the source into a code cell and a Markdown cell. This new Markdown cell will continue until next Python code appears. If you want to include a comment at the begining of line, you can write the comment just above the following codes without a blank line. # First comment in a code cell. a = 2 becomes # First comment in a code cell. a = 2 [2] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 1.03s ) Despite of a Markdown cell, you may want to devide successive codes into separate cells. This can be done by putting a special inline comment to define a cell. The comment pattern is # - . For example, a, b, c = 1, 2, 3 a # - b becomes a, b, c = 1, 2, 3 a [3] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 1.04s ) 1 b [4] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 1.04s ) 2 You can add options to a code block by adding them after a cell devider. # -hide d = 4 # * Output: `d` is equal to {{d}}. Above python code is equivalent to the next Markdown source. ```python hide d = 4 ``` * Output: `d` is equal to {{d}}. Then you can hide the python code cell. Output: d is equal to 4. 5.2 Fenced code block in Python source You can write a fenced code block in a Python source as comment. # ```python # print(1) # ``` becomes: print(1) [7] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 1.05s ) 1 And, # ~~~ # ```python # print(1) # ``` # ~~~ becomes: ```python print(1) ``` 5.3 A package for comment formatting In this scheme, we have to write many comments for Markdown cells. But a linter such as pycodestyle doesn't allow us to write a very long comment in one line longer than (for example) 79 characters. This means that we have to write Markdown source with several new line characters even we are writing one paragraph. In order to overcome this incovenient situation, a comment formatting pakage pyls-cwrap has been prepared. You can install this package as pip install pyls-cwrap . In Atom, if you use ide-python , just press [Ctrl]+[Shift]+[C] (Windows, default setting), sequential comments are automatically formatted nicely. 5.4 Source code File 3 script.py # # Standalone Script # Using Atom's [Hydrogen](https://nteract.gitbooks.io/hydrogen/) package, you can # execute any Python script codes within a fenced code block in a Markdown source. So # you can edit your code verifying its execution results. But unfortunately (as long as # I know), the entire Markdown source cannot be executed all at once as a standalone # script and cannot be ran by Python interpreter. Pheasant connects between a pure # Python script and a Markdown source. Actually, this page is written by a pure Python # code. # ## How to # A basic idea is that Markdown cells and Python code cells generally appear # alternately. We can write a Markdown cell with a successive comment lines. In order to # be recognized as a Markdown cell, `#` must be at the begining of lines. But we can # insert a blank line to make a paragraph. # Normal Python code is treated as a code cell as you expect. def add(x: int, y: int) -> int: \"\"\"Add `x` and `y`.\"\"\" return x + y def sub(x: int, y: int) -> int: \"\"\"Substract `y` from `x`.\"\"\" return x - y # When a comment starts at the begining of line after a code block, it divides the # source into a code cell and a Markdown cell. This new Markdown cell will continue # until next Python code appears. # If you want to include a comment at the begining of line, you can write the comment # just above the following codes without a blank line. # ~~~python # # First comment in a code cell. # a = 2 # ~~~ # becomes # First comment in a code cell. a = 2 # Despite of a Markdown cell, you may want to devide successive codes into separate # cells. This can be done by putting a special inline comment to define a cell. The # comment pattern is `# -`. For example, # ~~~python # a, b, c = 1, 2, 3 # a # # - # b # ~~~ # becomes a, b, c = 1, 2, 3 a # - b # You can add options to a code block by adding them after a cell devider. # ~~~python # # -hide # d = 4 # # * Output: `d` is equal to {{d}}. # ~~~ # Above python code is equivalent to the next Markdown source. # ~~~ # ```python hide # d = 4 # ``` # * Output: `d` is equal to {{d}}. # ~~~ # Then you can hide the python code cell. # -hide d = 4 # * Output: `d` is equal to {{d}}. # ## Fenced code block in Python source # You can write a fenced code block in a Python source as comment. # ~~~python # # ```python # # print(1) # # ``` # ~~~ # becomes: # ```python # print(1) # ``` # And, # ~~~python # # ~~~ # # ```python # # print(1) # # ``` # # ~~~ # ~~~ # becomes: # ~~~ # ```python # print(1) # ``` # ~~~ # ## A package for comment formatting # In this scheme, we have to write many comments for Markdown cells. But a linter such # as pycodestyle doesn't allow us to write a very long comment in one line longer than # (for example) 79 characters. This means that we have to write Markdown source with # several new line characters even we are writing one paragraph. In order to overcome # this incovenient situation, a comment formatting pakage # [`pyls-cwrap`](https://github.com/daizutabi/pyls-cwrap) has been prepared. You can # install this package as `pip install pyls-cwrap`. In Atom, if you use # [`ide-python`](https://atom.io/packages/ide-python), just press [Ctrl]+[Shift]+[C] # (Windows, default setting), sequential comments are automatically formatted nicely. # ## Source code # #File script.py {%=script.py%}","title":"Script"},{"location":"user-guide/script/#5-standalone-script","text":"Using Atom's Hydrogen package, you can execute any Python script codes within a fenced code block in a Markdown source. So you can edit your code verifying its execution results. But unfortunately (as long as I know), the entire Markdown source cannot be executed all at once as a standalone script and cannot be ran by Python interpreter. Pheasant connects between a pure Python script and a Markdown source. Actually, this page is written by a pure Python code.","title":"5 Standalone Script"},{"location":"user-guide/script/#51-how-to","text":"A basic idea is that Markdown cells and Python code cells generally appear alternately. We can write a Markdown cell with a successive comment lines. In order to be recognized as a Markdown cell, # must be at the begining of lines. But we can insert a blank line to make a paragraph. Normal Python code is treated as a code cell as you expect. def add(x: int, y: int) -> int: \"\"\"Add `x` and `y`.\"\"\" return x + y def sub(x: int, y: int) -> int: \"\"\"Substract `y` from `x`.\"\"\" return x - y [1] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 1.03s ) When a comment starts at the begining of line after a code block, it divides the source into a code cell and a Markdown cell. This new Markdown cell will continue until next Python code appears. If you want to include a comment at the begining of line, you can write the comment just above the following codes without a blank line. # First comment in a code cell. a = 2 becomes # First comment in a code cell. a = 2 [2] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 1.03s ) Despite of a Markdown cell, you may want to devide successive codes into separate cells. This can be done by putting a special inline comment to define a cell. The comment pattern is # - . For example, a, b, c = 1, 2, 3 a # - b becomes a, b, c = 1, 2, 3 a [3] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 1.04s ) 1 b [4] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 1.04s ) 2 You can add options to a code block by adding them after a cell devider. # -hide d = 4 # * Output: `d` is equal to {{d}}. Above python code is equivalent to the next Markdown source. ```python hide d = 4 ``` * Output: `d` is equal to {{d}}. Then you can hide the python code cell. Output: d is equal to 4.","title":"5.1 How to"},{"location":"user-guide/script/#52-fenced-code-block-in-python-source","text":"You can write a fenced code block in a Python source as comment. # ```python # print(1) # ``` becomes: print(1) [7] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 1.05s ) 1 And, # ~~~ # ```python # print(1) # ``` # ~~~ becomes: ```python print(1) ```","title":"5.2 Fenced code block in Python source"},{"location":"user-guide/script/#53-a-package-for-comment-formatting","text":"In this scheme, we have to write many comments for Markdown cells. But a linter such as pycodestyle doesn't allow us to write a very long comment in one line longer than (for example) 79 characters. This means that we have to write Markdown source with several new line characters even we are writing one paragraph. In order to overcome this incovenient situation, a comment formatting pakage pyls-cwrap has been prepared. You can install this package as pip install pyls-cwrap . In Atom, if you use ide-python , just press [Ctrl]+[Shift]+[C] (Windows, default setting), sequential comments are automatically formatted nicely.","title":"5.3 A package for comment formatting"},{"location":"user-guide/script/#54-source-code","text":"File 3 script.py # # Standalone Script # Using Atom's [Hydrogen](https://nteract.gitbooks.io/hydrogen/) package, you can # execute any Python script codes within a fenced code block in a Markdown source. So # you can edit your code verifying its execution results. But unfortunately (as long as # I know), the entire Markdown source cannot be executed all at once as a standalone # script and cannot be ran by Python interpreter. Pheasant connects between a pure # Python script and a Markdown source. Actually, this page is written by a pure Python # code. # ## How to # A basic idea is that Markdown cells and Python code cells generally appear # alternately. We can write a Markdown cell with a successive comment lines. In order to # be recognized as a Markdown cell, `#` must be at the begining of lines. But we can # insert a blank line to make a paragraph. # Normal Python code is treated as a code cell as you expect. def add(x: int, y: int) -> int: \"\"\"Add `x` and `y`.\"\"\" return x + y def sub(x: int, y: int) -> int: \"\"\"Substract `y` from `x`.\"\"\" return x - y # When a comment starts at the begining of line after a code block, it divides the # source into a code cell and a Markdown cell. This new Markdown cell will continue # until next Python code appears. # If you want to include a comment at the begining of line, you can write the comment # just above the following codes without a blank line. # ~~~python # # First comment in a code cell. # a = 2 # ~~~ # becomes # First comment in a code cell. a = 2 # Despite of a Markdown cell, you may want to devide successive codes into separate # cells. This can be done by putting a special inline comment to define a cell. The # comment pattern is `# -`. For example, # ~~~python # a, b, c = 1, 2, 3 # a # # - # b # ~~~ # becomes a, b, c = 1, 2, 3 a # - b # You can add options to a code block by adding them after a cell devider. # ~~~python # # -hide # d = 4 # # * Output: `d` is equal to {{d}}. # ~~~ # Above python code is equivalent to the next Markdown source. # ~~~ # ```python hide # d = 4 # ``` # * Output: `d` is equal to {{d}}. # ~~~ # Then you can hide the python code cell. # -hide d = 4 # * Output: `d` is equal to {{d}}. # ## Fenced code block in Python source # You can write a fenced code block in a Python source as comment. # ~~~python # # ```python # # print(1) # # ``` # ~~~ # becomes: # ```python # print(1) # ``` # And, # ~~~python # # ~~~ # # ```python # # print(1) # # ``` # # ~~~ # ~~~ # becomes: # ~~~ # ```python # print(1) # ``` # ~~~ # ## A package for comment formatting # In this scheme, we have to write many comments for Markdown cells. But a linter such # as pycodestyle doesn't allow us to write a very long comment in one line longer than # (for example) 79 characters. This means that we have to write Markdown source with # several new line characters even we are writing one paragraph. In order to overcome # this incovenient situation, a comment formatting pakage # [`pyls-cwrap`](https://github.com/daizutabi/pyls-cwrap) has been prepared. You can # install this package as `pip install pyls-cwrap`. In Atom, if you use # [`ide-python`](https://atom.io/packages/ide-python), just press [Ctrl]+[Shift]+[C] # (Windows, default setting), sequential comments are automatically formatted nicely. # ## Source code # #File script.py {%=script.py%}","title":"5.4 Source code"},{"location":"user-guide/sympy/","text":"MathJax.Hub.Config({ TeX: { equationNumbers: { autoNumber: \"AMS\" } } }); 4 SymPy and LaTeX First, import the SymPy package. import sympy [1] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 958ms ) 4.1 Basic usage SymPy symbols or expressions in a fenced code block are automatically rendered in display mode: x = sympy.Symbol('x') x**3 [2] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 962ms ) $$x^{3}$$ On the other hand, in an inline code, a SymPy object just returns a latex string like this {{x**2}} = x^{2}. This is intentional behavior. You can choose inline mode or display mode. This is an inline mode example: ${{x**2+1/x+1}}$ This is an inline mode example: x^{2} + 1 + \\frac{1}{x} x^{2} + 1 + \\frac{1}{x} This is a display mode example: $${{x**2+1/x+1}}$$ This is a display mode example: x^{2} + 1 + \\frac{1}{x} x^{2} + 1 + \\frac{1}{x} You can concatenate SymPy objects and/or normal latex source in the same line to make an expression form you prefer: $${{x**2}} - {{x}} + {{x}} + \\frac1y$$ x^{2} - x + x + \\frac1y x^{2} - x + x + \\frac1y Here, -x+x -x+x does not cancel out automatically. 4.2 LatexPrinter You can pass keyward arguments to LatexPrinter by \"commented filter\" notation. `fold_short_frac` option: Emit `p/q` instead of `\\frac{p}{q}` Example: ${{1/x}}$ vs. ${{1/x # fold_short_frac=True}}$ fold_short_frac option: Emit p/q instead of \\frac{p}{q} Example: \\frac{1}{x} \\frac{1}{x} vs. 1 / x 1 / x In a fenced code block, you can use normal option notation: ```python fold_frac_powers=True x**sympy.Rational(2, 3) ``` x**sympy.Rational(2, 3) [13] 2020-05-19 14:00:47 ( 3.00ms ) (fold_frac_powers=True) python3 ( 1.01s ) $$x^{2/3}$$ 4.3 Numbering Pheasant uses MathJax's Automatic Equation Numbering . Use the custom header syntax like the figure and table. Also, you can add a tag for link. #Eq f(x) = {{x**2}} {#eq-a#} \\begin{equation} f(x) = x^{2} \\label{eq-a} \\end{equation} Using starred form, the equation won\u2019t be numbered like original LaTeX. #Eq* f(x) = {{x**2}} \\begin{equation*} f(x) = x^{2} \\end{equation*} As usual, you can refer to equation: See Eq. {#eq-a#} As usual, you can refer to equation: See Eq. \\eqref{eq-a} Also, you can use native latex syntax. From MathJax document: In equation \\eqref{eq:sample}, we find the value of an interesting integral: #Eq \\int_0^\\infty \\frac{x^3}{e^x-1}\\,dx = \\frac{\\pi^4}{15} \\label{eq:sample} In equation \\eqref{eq:sample}, we find the value of an interesting integral: \\begin{equation} \\int_0^\\infty \\frac{x^3}{e^x-1}\\,dx = \\frac{\\pi^4}{15} \\label{eq:sample} \\end{equation}","title":"SymPy"},{"location":"user-guide/sympy/#4-sympy-and-latex","text":"First, import the SymPy package. import sympy [1] 2020-05-19 14:00:47 ( 3.00ms ) python3 ( 958ms )","title":"4 SymPy and LaTeX"},{"location":"user-guide/sympy/#41-basic-usage","text":"SymPy symbols or expressions in a fenced code block are automatically rendered in display mode: x = sympy.Symbol('x') x**3 [2] 2020-05-19 14:00:47 ( 4.00ms ) python3 ( 962ms ) $$x^{3}$$ On the other hand, in an inline code, a SymPy object just returns a latex string like this {{x**2}} = x^{2}. This is intentional behavior. You can choose inline mode or display mode. This is an inline mode example: ${{x**2+1/x+1}}$ This is an inline mode example: x^{2} + 1 + \\frac{1}{x} x^{2} + 1 + \\frac{1}{x} This is a display mode example: $${{x**2+1/x+1}}$$ This is a display mode example: x^{2} + 1 + \\frac{1}{x} x^{2} + 1 + \\frac{1}{x} You can concatenate SymPy objects and/or normal latex source in the same line to make an expression form you prefer: $${{x**2}} - {{x}} + {{x}} + \\frac1y$$ x^{2} - x + x + \\frac1y x^{2} - x + x + \\frac1y Here, -x+x -x+x does not cancel out automatically.","title":"4.1 Basic usage"},{"location":"user-guide/sympy/#42-latexprinter","text":"You can pass keyward arguments to LatexPrinter by \"commented filter\" notation. `fold_short_frac` option: Emit `p/q` instead of `\\frac{p}{q}` Example: ${{1/x}}$ vs. ${{1/x # fold_short_frac=True}}$ fold_short_frac option: Emit p/q instead of \\frac{p}{q} Example: \\frac{1}{x} \\frac{1}{x} vs. 1 / x 1 / x In a fenced code block, you can use normal option notation: ```python fold_frac_powers=True x**sympy.Rational(2, 3) ``` x**sympy.Rational(2, 3) [13] 2020-05-19 14:00:47 ( 3.00ms ) (fold_frac_powers=True) python3 ( 1.01s ) $$x^{2/3}$$","title":"4.2 LatexPrinter"},{"location":"user-guide/sympy/#43-numbering","text":"Pheasant uses MathJax's Automatic Equation Numbering . Use the custom header syntax like the figure and table. Also, you can add a tag for link. #Eq f(x) = {{x**2}} {#eq-a#} \\begin{equation} f(x) = x^{2} \\label{eq-a} \\end{equation} Using starred form, the equation won\u2019t be numbered like original LaTeX. #Eq* f(x) = {{x**2}} \\begin{equation*} f(x) = x^{2} \\end{equation*} As usual, you can refer to equation: See Eq. {#eq-a#} As usual, you can refer to equation: See Eq. \\eqref{eq-a} Also, you can use native latex syntax. From MathJax document: In equation \\eqref{eq:sample}, we find the value of an interesting integral: #Eq \\int_0^\\infty \\frac{x^3}{e^x-1}\\,dx = \\frac{\\pi^4}{15} \\label{eq:sample} In equation \\eqref{eq:sample}, we find the value of an interesting integral: \\begin{equation} \\int_0^\\infty \\frac{x^3}{e^x-1}\\,dx = \\frac{\\pi^4}{15} \\label{eq:sample} \\end{equation}","title":"4.3 Numbering"},{"location":"user-guide/link/included/","text":"Skipped.","title":"Included"},{"location":"user-guide/link/included/","text":"Skipped.","title":"Included"},{"location":"user-guide/link/section/","text":"Skipped.","title":"Section"}]}